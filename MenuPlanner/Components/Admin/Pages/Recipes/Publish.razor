@page "/admin/recipes/publish/{Slug}"
@attribute [Authorize(Roles = "SysAdmin,RecipePublisher")]
@inject IRecipeService RecipeService
@inject NavigationManager Nav
@inject IMapper Mapper
@inject IJSRuntime JSRuntime
@rendermode InteractiveServer
@attribute [StreamRendering]

<PageTitle>Oppskrift</PageTitle>
@if (recipe == null)
{
    <Loader />
    <PageTitle>Laster oppskrift ...</PageTitle>
}
else
{
    <form action="Publish">
        <input type="hidden" id="recipeUrl" name="recipeUrl" value="@recipe.Slug" />
        <AdminRecipeHeader 
            Recipe="recipe" 
            EntityContext="EntityContext.Publish"
            IsEditButtonEnabled=false
            IsPublishButtonEnabled=false />
    </form>

    <div class="d-block">
        <RecipeHeader Recipe="recipe" DisplayAsSubRecipe=false />
        <h2>Hovedoppskrift</h2>
        @if (recipe.Notes != null && recipe.Notes.Count > 0)
        {
            <div class="recipe-notes-wrapper">
                <RecipeNotes Notes="recipe.Notes" />
            </div>
        }
        <div class="recipe-ingredients-wrapper">
            <RecipeIngredients IngredientList="recipe.RecipeIngredients" />
        </div>
        <RecipeSubRecipesList SubRecipes="subRecipes" />
        <div class="recipe-steps-wrapper">
            <RecipeSteps StepList="recipe.Steps" RecipeUrl="recipe.Url" />
        </div>
    </div>

    @if (recipe.SubRecipes != null && recipe.SubRecipes.Count > 0)
    {
        <div class="d-flex flex-column w-100">
            <h2>Deloppskrifter</h2>
            @foreach (var subRecipe in recipe.SubRecipes.Where(sr => sr.Slug != recipe.Slug).ToList())
            {
                <div class="d-block">
                    <RecipeHeader Recipe="subRecipe" DisplayAsSubRecipe=true />
                    @if (subRecipe.Notes != null && subRecipe.Notes.Count > 0)
                    {
                        <div class="recipe-notes-wrapper">
                            <RecipeNotes Notes="subRecipe.Notes" />
                        </div>
                    }
                    <div class="d-flex flex-row">
                        <div class="recipe-ingredients-wrapper">
                            <RecipeIngredients IngredientList="subRecipe.RecipeIngredients" />
                        </div>
                        <div class="recipe-steps-wrapper">
                            <RecipeSteps StepList="subRecipe.Steps" RecipeUrl="subRecipe.Slug" />
                        </div>
                    </div>
                </div>
            }
        </div>
    }
}

@code {
    [Parameter]
    public string Slug { get; set; }

    RecipeDetailsDisplayDTO? recipe;

    List<(string Slug, string Name)>? subRecipes = new List<(string Slug, string Name)>();

    protected override async Task OnInitializedAsync()
    {
        var result = await RecipeService.GetBySlug(Slug, LifecycleState.PendingApproval);
        if (result.Success)
        {
            recipe = result.Data;
            if (recipe.SubRecipes != null)
            {
                foreach (var subRecipe in recipe.SubRecipes)
                {
                    subRecipes.Add(($"/admin/recipes/{recipe.Slug}#{subRecipe.Slug}", subRecipe.Name));
                }
            }

            JSRuntime.InvokeVoidAsync("setTitle", recipe!.Name);
        }
    }

    void GoBack()
    {
        Nav.NavigateTo($"/admin/recipes/{recipe!.Slug}");
    }
}
