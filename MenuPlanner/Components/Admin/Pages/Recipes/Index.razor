@page "/admin/recipes"
@page "/admin/recipes/{State}"
@attribute [Authorize(Roles = "SysAdmin,RecipeEditor,RecipePublisher")]
@inject IRecipeService RecipeService
@inject IMapper Mapper
@inject NavigationManager Nav
@rendermode InteractiveServer
@attribute [StreamRendering]

<PageTitle>Oppskrifter</PageTitle>
<h1 class="d-flex justify-content-between align-items-center">
    Oppskrifter
    <MudFab Color="Color.Success" StartIcon="@Icons.Material.Filled.Add" OnClick="AddRecipe" />
</h1>

<EntityStateTabs SelectedState="enumState" Numbers="numbers" />

<MudTable ServerData="@(new Func<TableState, Task<TableData<RecipeSummaryDisplayDTO>>>(ServerReload))"
          T="RecipeSummaryDisplayDTO"
          @ref="table"
          OnRowClick="@GoToRecipe">
    <ToolBarContent>
        <MudTextField T="string" ValueChanged="@(s=>OnSearch(s))" Placeholder="Søk etter oppskrifter"
            Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search"
            IconSize="Size.Medium" Class="mt-0"></MudTextField>
    </ToolBarContent>
    <HeaderContent>
        <MudTh></MudTh>
        <MudTh>Navn og beskrivelse</MudTh>
        <MudTh>
            <MudTableSortLabel SortBy="new Func<RecipeSummaryDisplayDTO, object>(x => x.Country.Name)">
                Opprinnelsesland
            </MudTableSortLabel>
        </MudTh>
        <MudTh>
            <MudTableSortLabel SortBy="new Func<RecipeSummaryDisplayDTO, object>(x => x.RatingAverage)">
                Brukervurering
            </MudTableSortLabel>
        </MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd Class="pointer">
            <img src="/images/recipes/@(context.Slug)200x150.jpg"
                 class="recipe-index-img" />
        </MudTd>
        <MudTd DataLabel="Navn og beskrivlse" Class="pointer">
            <h5>
                @context.Name
            </h5>
            <p>@context.Description</p>
        </MudTd>
        <MudTd DataLabel="Opprinnelsesland" Class="pointer">
            <img src="/images/flags/icon-24px/@(context.Country.ISO3166_2).png" />
            @context.Country.Name
        </MudTd>
        <MudTd DataLabel="Brukervurdering" Class="pointer">
            @context.RatingAverage
        </MudTd>
    </RowTemplate>
    <NoRecordsContent>
        <MudText Align="Align.Left">
            @{
                string? som = "som ";
                if (string.IsNullOrWhiteSpace(searchString))
                {
                    som = "";
                }
                string text = State switch
                {
                    "Draft" => "Ingen oppskriftsutkast",
                    "PendingApproval" => $"Ingen oppskrifter {som}venter på godkjenning",
                    "Current" => "Ingen publiserte oppskrifter",
                    "Withdrawn" => "Ingen tilbaketrukne oppskrifter",
                    "Archived" => "Ingen arkiverte oppskrifter",
                    _ => ""
                };
                if (!string.IsNullOrWhiteSpace(searchString))
                {
                    <span>@text matcher søkefrasen @(searchString).</span>
                }
                else
                {
                    <span>@(text).</span>
                }
            }
        </MudText>
    </NoRecordsContent>
    <LoadingContent>
        <Loader />
    </LoadingContent>
    <PagerContent>
        <MudTablePager HideRowsPerPage=true PageSizeOptions="new int[]{5}" />
    </PagerContent>
</MudTable>


@code {
    [Parameter]
    public string State { get; set; } = "Current";
    LifecycleState enumState;
    (int Drafts, int PendingApproval, int Current, int Withdrawn, int Archived) numbers;

    MudTable<RecipeSummaryDisplayDTO> table = new();
    string searchString = string.Empty;

    //IEnumerable<RecipeSummaryDisplayDTO> pagedData;
    //int totalItems;

    // protected override async Task OnInitializedAsync()
    // {
    //     if (Enum.TryParse(State, out LifecycleState parsedState))
    //     {
    //         enumState = parsedState;
    //     }
    //     else
    //     {
    //         enumState = LifecycleState.Current;
    //     }
    // }

    private void OnSearch(string text)
    {
        searchString = text;
        table.ReloadServerData();
    }

    private void GoToRecipe(TableRowClickEventArgs<RecipeSummaryDisplayDTO> e)
    {
        string slug = e.Item.Slug;
        Nav.NavigateTo($"/admin/recipe/{slug}/{State}");
    }

    private void AddRecipe()
    {
        Nav.NavigateTo("/admin/recipe/new");
    }

    private async Task<TableData<RecipeSummaryDisplayDTO>> ServerReload(TableState state)
    {
        if (numbers.Sum() == 0) // Kan spare 5 turer til databasen hvis tallene er her allerede.
        {            
            numbers = (
                await RecipeService.Count(LifecycleState.Draft),
                await RecipeService.Count(LifecycleState.PendingApproval),
                await RecipeService.Count(LifecycleState.Current),
                await RecipeService.Count(LifecycleState.Withdrawn),
                await RecipeService.Count(LifecycleState.Archived)
            );
        }
        if (Enum.TryParse(State, out LifecycleState parsedState))
        {
            enumState = parsedState;
        }
        else
        {
            enumState = LifecycleState.Current;
        }
        return await RecipeService.GetPagedWithState(
            enumState, 
            searchString, 
            state.Page, 
            state.PageSize, 
            state.SortDirection);

        // var result = await RecipeService.GetAllWithState(enumState);
        // IEnumerable<RecipeSummaryDisplayDTO> data = Mapper.Map<List<RecipeSummaryDisplayDTO>>(result.Data);

        // data = data.Where(element =>
        // {
        //     if (string.IsNullOrWhiteSpace(searchString))
        //         return true;
        //     if (element.Name.Contains(searchString, StringComparison.OrdinalIgnoreCase))
        //         return true;
        //     if (element.Description.Contains(searchString, StringComparison.OrdinalIgnoreCase))
        //         return true;
        //     if (element.User != null)
        //     {
        //         if ($"{element.User.FirstName} {element.User.LastName}"
        //             .Contains(searchString, StringComparison.OrdinalIgnoreCase))
        //             return true;
        //     }
        //     if (element.Country != null)
        //     {
        //         if (element.Country.Name.Contains(searchString, StringComparison.OrdinalIgnoreCase))
        //             return true;
        //     }
        //     return false;

        // }).ToArray();
        // totalItems = data.Count();
        //data = data.OrderByDirection(state.SortDirection, o => o.RatingAverage);

        // pagedData = data.Skip(state.Page * state.PageSize).Take(state.PageSize).ToArray();
        // return new TableData<RecipeSummaryDisplayDTO>() { TotalItems = totalItems, Items = pagedData };
    }
}
