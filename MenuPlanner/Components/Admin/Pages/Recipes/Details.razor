@page "/admin/recipe/{Slug}/{State}"
@attribute [Authorize(Roles = "SysAdmin,RecipeEditor,RecipePublisher")]
@inject UserManager<User> UserManager
@inject AuthenticationStateProvider AuthStateProvider
@inject IRecipeService RecipeService
@inject NavigationManager Nav
@inject IMapper Mapper
@rendermode InteractiveServer
@attribute [StreamRendering]

<PageTitle>Oppskrift</PageTitle>
@if (recipe == null)
{
    <Loader />
}
else
{
    <AdminRecipeHeader 
        Recipe="recipe" 
        EntityContext="EntityContext.View"
        IsEditButtonEnabled=userIsEditor
        IsPublishButtonEnabled=userIsPublisher />
}

@code {
    [Parameter]
    public string Slug { get; set; } = string.Empty;

    [Parameter]
    public string State { get; set; } = "Current";


    RecipeDetailsDisplayDTO? recipe;

    bool userIsEditor;
    bool userIsPublisher;
    LifecycleState enumState;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthStateProvider.GetAuthenticationStateAsync();
        var userClaim = authState.User;
        User? user = await UserManager.GetUserAsync(userClaim);
        if (user != null)
        { 
            var roles = await UserManager.GetRolesAsync(user);
            if (roles.Contains("RecipeEditor") || roles.Contains("SysAdmin"))
            {
                userIsEditor = true;
            }
            if (roles.Contains("RecipePublisher") || roles.Contains("SysAdmin"))
            {
                userIsPublisher = true;
            }
        }
        if (Enum.TryParse(State, out LifecycleState parsedState))
        {
            enumState = parsedState;
        }
        else
        {
            enumState = LifecycleState.Current;
        }

        var result = await RecipeService.GetBySlug(Slug, enumState);
        if (result.Success)
        {
            recipe = Mapper.Map<RecipeDetailsDisplayDTO>(result.Data);
        }
    }

    void EditRecipe()
    {
        Nav.NavigateTo($"/admin/recipes/edit/{recipe!.Slug}");
    }
}
