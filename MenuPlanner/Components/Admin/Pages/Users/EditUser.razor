@page "/admin/users/edit/{Id}"
@inject UserManager<User> UserManager
@inject RoleManager<Role> RoleManager
@inject IMapper Mapper
@inject NavigationManager Nav
@attribute [Authorize(Roles = "SysAdmin,UserAdmin")]
@rendermode InteractiveServer
@attribute [StreamRendering]

<PageTitle>Bruker</PageTitle>
@if (userDTO == null)
{
    <Loader />
}
else
{ 
    <EditForm Model="userDTO" OnValidSubmit="HandleSubmit">

        @* Viktig at denne står inni EditForm, fordi den inneholder submit-knappen: *@
        <UserHeader User="userEntity" EntityContext="EntityContext.Edit" />

        <DataAnnotationsValidator />
        <MudGrid>
            <MudItem xs="12" sm="12" md="10" lg="8">
                <MudCard>
                    <MudCardContent>
                        <div class="d-flex align-content-between">
                            <MudTextField Label="Fornavn" HelperText=""
                                @bind-Value="userDTO.FirstName" For="(() => userDTO.FirstName)"/>
                            <MudTextField Label="Etternavn" HelperText=""
                                @bind-Value="userDTO.LastName" For="(() => userDTO.LastName)"/>
                        </div>
                        <MudTextField Label="E-postadresse" HelperText=""
                            @bind-Value="userDTO.Email" For="(() => userDTO.Email)" />
                        @if (allRoles != null)
                        {
                            <h4 class="d-flex justify-content-between mt-2 mb-2">
                                Roller
                                <MudFab 
                                    Disabled=@(userRoleNames.Count < 1)
                                    Size="Size.Small"
                                    StartIcon="@Icons.Material.Rounded.Clear"
                                    Color="Color.Dark"
                                    Label="Fjern alle"
                                    Title="Fjern alle roller fra brukeren"
                                    OnClick="ClearAllUserRoles"/>
                            </h4>

                            if (groupedRolesAdmins != null)
                            {
                                <div class="role-group-wrapper">
                                    <h5 class="role-group-header pointer" @onclick="(() => hideAdmins = !hideAdmins)">
                                        <i class="bi bi-chevron-@(hideAdmins?"expand":"contract") me-2"></i>
                                        <i class="bi bi-gear mud-primary-text"></i>
                                        Administratorroller
                                        (@GetCheckedRoles(groupedRolesAdmins) av @groupedRolesAdmins.Count valgt)
                                    </h5>
                                    <div class="roles-in-group-wrapper@(hideAdmins?" collapse":"")">
                                        @foreach (var role in groupedRolesAdmins)
                                        {
                                            <div class="role-wrapper">
                                                <MudCheckBox T="bool"
                                                             checked="@IsRoleChecked(role.Name)"
                                                             @onclick="@(() => ToggleRole(role.Name))"
                                                             Label="@role.DisplayName"
                                                             Color="Color.Primary"></MudCheckBox>
                                                <span>@role.Description</span>
                                            </div>
                                        }
                                    </div>
                                </div>
                            }
                            if (groupedRolesEditors != null)
                            {
                                <div class="role-group-wrapper">
                                    <h5 class="role-group-header pointer" @onclick="(() => hideEditors = !hideEditors)">
                                        <i class="bi bi-chevron-@(hideEditors?"expand":"contract") me-2"></i>
                                        <i class="bi bi-pencil-square mud-warning-text"></i>
                                        Forfatterroller
                                        (@GetCheckedRoles(groupedRolesEditors) av @groupedRolesEditors.Count valgt)
                                    </h5>
                                    <div class="roles-in-group-wrapper@(hideEditors?" collapse":"")">
                                        @foreach (var role in groupedRolesEditors)
                                        {
                                            <div class="role-wrapper">
                                                <MudCheckBox T="bool"
                                                             checked="@IsRoleChecked(role.Name)"
                                                             @onclick="@(() => ToggleRole(role.Name))"
                                                             Label="@role.DisplayName"
                                                             Color="Color.Warning"></MudCheckBox>
                                                <span>@role.Description</span>
                                            </div>
                                        }
                                    </div>
                                </div>
                            }
                            if (groupedRolesPublishers != null)
                            {
                                <div class="role-group-wrapper">
                                    <h5 class="role-group-header pointer" @onclick="(() => hidePublishers = !hidePublishers)">
                                        <i class="bi bi-chevron-@(hidePublishers?"expand":"contract") me-2"></i>
                                        <i class="bi bi-check2-square mud-tertiary-text"></i>
                                        Publiseringsroller
                                        (@GetCheckedRoles(groupedRolesPublishers) av @groupedRolesPublishers.Count valgt)
                                    </h5>
                                    <div class="roles-in-group-wrapper@(hidePublishers?" collapse":"")">
                                        @foreach (var role in groupedRolesPublishers)
                                        {
                                            <div class="role-wrapper">
                                                <MudCheckBox T="bool"
                                                             checked="@IsRoleChecked(role.Name)"
                                                             @onclick="@(() => ToggleRole(role.Name))"
                                                             Label="@role.DisplayName"
                                                             Color="Color.Tertiary"></MudCheckBox>
                                                <span>@role.Description</span>
                                            </div>
                                        }
                                    </div>
                                </div>
                            }
                            if (groupedRolesModerators != null)
                            {
                                <div class="role-group-wrapper">
                                    <h5 class="role-group-header pointer" @onclick="(() => hideModerators = !hideModerators)">
                                        <i class="bi bi-chevron-@(hideModerators?"expand":"contract") me-2"></i>
                                        <i class="bi bi-chat mud-error-text"></i>
                                        Moderatorroller
                                        (@GetCheckedRoles(groupedRolesModerators) av @groupedRolesModerators.Count valgt)
                                    </h5>
                                    <div class="roles-in-group-wrapper@(hideModerators?" collapse":"")">
                                        @foreach (var role in groupedRolesModerators)
                                        {
                                            <div class="role-wrapper">
                                                <MudCheckBox T="bool"
                                                             Class=""
                                                             checked="@IsRoleChecked(role.Name)"
                                                             @onclick="@(() => ToggleRole(role.Name))"
                                                             Label="@role.DisplayName"
                                                             Color="Color.Error"></MudCheckBox>
                                                <span>@role.Description</span>
                                            </div>
                                        }
                                    </div>
                                </div>
                            }
                        }
                    </MudCardContent>
@*                     <MudCardActions>
                        <MudButton
                            ButtonType="ButtonType.Button"
                            @onclick="GoBack"
                            StartIcon="@Icons.Material.Rounded.ChevronLeft"
                            Variant="Variant.Filled"
                            Style="@($"color:{Colors.Indigo.Lighten5}; background:{Colors.Indigo.Default};")">
                            Avbryt
                        </MudButton>
                        <MudButton 
                            ButtonType="ButtonType.Submit" 
                            StartIcon="@Icons.Material.Rounded.Save"
                            Variant="Variant.Filled"
                            Style="@($"color:{Colors.Green.Lighten5}; background:{Colors.Green.Default};")"
                            Class="ml-auto">
                            Lagre
                        </MudButton>
                    </MudCardActions> *@
                </MudCard>
            </MudItem>
        </MudGrid>
    </EditForm>
}

@code {
    [Parameter]
    public string Id { get; set; }

    User? userEntity;
    UserEditDTO? userDTO;

    string? fullName;

    List<RoleDisplayDTO>? allRoles;
    List<RoleDisplayDTO>? groupedRolesAdmins;
    List<RoleDisplayDTO>? groupedRolesEditors;
    List<RoleDisplayDTO>? groupedRolesPublishers;
    List<RoleDisplayDTO>? groupedRolesModerators;
    IList<string> userRoleNames = new List<string>();

    bool hideAdmins;
    bool hideEditors;
    bool hidePublishers;
    bool hideModerators;

    protected override async Task OnInitializedAsync()
    {
        userEntity = await UserManager.FindByIdAsync(Id);

        // Ikke tillate endring på beskyttede brukere:
        if (userEntity != null && userEntity.IsProtectedSystemUser)
        {
            Nav.NavigateTo($"/admin/users/{userEntity.Id}");
        }

        userDTO = Mapper.Map<UserEditDTO>(userEntity);
        if (userDTO != null)
        {
            fullName = $"{userDTO.LastName}, {userDTO.FirstName}";

            allRoles = Mapper.Map<List<RoleDisplayDTO>>(await RoleManager.Roles.ToListAsync())
                .OrderBy(o => o.SortOrder).ToList();
            groupedRolesAdmins = allRoles.Where(g => g.Group == RoleGroup.Administrators).ToList();
            groupedRolesEditors = allRoles.Where(g => g.Group == RoleGroup.Editors).ToList();
            groupedRolesPublishers = allRoles.Where(g => g.Group == RoleGroup.Publishers).ToList();
            groupedRolesModerators = allRoles.Where(g => g.Group == RoleGroup.Moderators).ToList();

            userRoleNames = await UserManager.GetRolesAsync(userEntity);

            userDTO.Roles = allRoles
                .Where(role => userRoleNames.Contains(role.Name))
                .ToList();

            hideAdmins = true;
            hideEditors = true;
            hidePublishers = true;
            hideModerators = true;
        }
    }

    void ToggleRole(string roleName)
    {
        bool isChecked = userRoleNames.Contains(roleName);

        if (!isChecked)
        {
            userRoleNames.Add(roleName);
        }
        else
        {
            userRoleNames.Remove(roleName);
        }
    }

    void ClearAllUserRoles()
    {
        userRoleNames.Clear();            
    }

    bool IsRoleChecked(string roleName) => userRoleNames.Contains(roleName);

    int GetCheckedRoles(List<RoleDisplayDTO> roleGroup)
        => roleGroup.Where(c => userRoleNames.Contains(c.Name)).Count();

    async Task HandleSubmit()
    {
        // Fjerne alle brukerroller
        var userRoles = await UserManager.GetRolesAsync(userEntity);
        foreach (var role in userRoles)
        {
            await UserManager.RemoveFromRoleAsync(userEntity, role);
        }

        // Legge til de valgte brukerrollene
        foreach (var role in userRoleNames!)
        {
            await UserManager.AddToRoleAsync(userEntity, role);
        }

        // Overføre de andre feltverdiene fra DTO til entity
        Mapper.Map(userDTO, userEntity);

        await UserManager.UpdateAsync(userEntity);
        GoBack();
    }

    void GoBack()
    {
        Nav.NavigateTo($"/admin/users/{userEntity!.Id}");
    }
}
