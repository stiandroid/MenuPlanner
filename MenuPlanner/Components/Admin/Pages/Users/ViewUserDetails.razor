@page "/admin/users/{Id}"
@inject UserManager<User> UserManager
@inject RoleManager<Role> RoleManager
@inject NavigationManager Nav
@inject IMapper Mapper
@attribute [Authorize(Roles = "SysAdmin,UserAdmin")]
@rendermode InteractiveServer
@attribute [StreamRendering]

<PageTitle>Bruker</PageTitle>
@if (user == null)
{
    <Loader />
}
else
{
    <UserHeader User="user" Roles="roles" EntityContext="EntityContext.View" />

    <div class="d-flex flex-row flex-wrap mt-2">
        <div style="width:33%;">
            <h3>Oppskrifter</h3>
        </div>
        <div style="width:34%;">
            <h3>Ingredienser</h3>
        </div>
        <div style="width:33%;">
            <h3>Artikler</h3>
        </div>
    </div>

}

@code {
    [Parameter]
    public string Id { get; set; }

    User? user;
    List<RoleDisplayDTO>? roles;
    List<Role>? allRoles;

    protected override async Task OnInitializedAsync()
    {
        user = await UserManager.FindByIdAsync(Id);
        if (user != null)
        {
            allRoles = await RoleManager.Roles.ToListAsync();
            var roleNames = await UserManager.GetRolesAsync(user);

            roles = Mapper.Map<List<RoleDisplayDTO>>
                (allRoles.Where(r => roleNames.Contains(r.Name)).ToList());
        }
    }

    void EditUser()
    {
        Nav.NavigateTo($"/admin/users/edit/{user!.Id}");
    }
}
