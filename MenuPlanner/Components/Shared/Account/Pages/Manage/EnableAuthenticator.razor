@page "/Account/Manage/EnableAuthenticator"

@using Net.Codecrete.QrCodeGenerator

@inject UserManager<User> UserManager
@inject IdentityUserAccessor UserAccessor
@inject UrlEncoder UrlEncoder
@inject IdentityRedirectManager RedirectManager
@inject ILogger<EnableAuthenticator> Logger
@inject IJSRuntime JSRuntime

<PageTitle>Ta i bruk 2FA med autentikator-app</PageTitle>

@if (recoveryCodes is not null)
{
    <ShowRecoveryCodes RecoveryCodes="recoveryCodes.ToArray()" StatusMessage="@message" />
}
else
{
    <StatusMessage Message="@message" />
    <h3>
        <i class="bi bi-fingerprint"></i>
        Ta i bruk autentikator-app
    </h3>
    <div>
        <p>Gjør følgende for å ta i bruk 2FA med autentikator-app:</p>
        <ol class="list">
            <li>
                <p>
                    Last ned en autentikator-app som for eksempel Microsoft Authenticator for
                    <a href="https://go.microsoft.com/fwlink/?Linkid=825072">Android</a> og
                    <a href="https://go.microsoft.com/fwlink/?Linkid=825073">iOS</a> eller
                    Google Authenticator for
                    <a href="https://play.google.com/store/apps/details?id=com.google.android.apps.authenticator2&amp;hl=en">Android</a> og
                    <a href="https://itunes.apple.com/us/app/google-authenticator/id388497605?mt=8">iOS</a>.
                </p>
            </li>
            <li>
                <p>Inne i autentikator-appen, skann QR-koden eller skriv denne nøkkelen <kbd>@sharedKey</kbd> inn i autentikator-appen. Mellomrom og små eller store bokstaver spiller ingen rolle.</p>
                
                @* QR-kode: *@
                @((MarkupString)svgMarkup)

            </li>
            <li>
                <p>
                    Når du har skannet QR-koden eller skrevet inn nøkkelen over, gir autentikator-appen deg
                    en unik kode. Skriv denne koden inn i feltet nedenfor.
                </p>
                <div class="row">
                    <div class="col-md-6">
                        <EditForm Model="Input" FormName="send-code" OnValidSubmit="OnValidSubmitAsync" method="post">
                            <DataAnnotationsValidator />
                            <div class="form-floating mb-3">
                                <InputText @bind-Value="Input.Code" class="form-control" autocomplete="off" placeholder="Vennligst skriv inn koden." />
                                <label for="code" class="control-label form-label">Bekreftelseskode</label>
                                <ValidationMessage For="() => Input.Code" class="text-danger" />
                            </div>
                            <button type="submit" class="w-100 btn btn-lg btn-success">
                                <i class="bi bi-check-lg"></i>
                                Bekreft
                            </button>
                            <ValidationSummary class="text-danger" role="alert" />
                        </EditForm>
                    </div>
                </div>
            </li>
        </ol>
    </div>
}

@code {
    private const string AuthenticatorUriFormat = "otpauth://totp/{0}:{1}?secret={2}&issuer={0}&digits=6";

    private string svgMarkup = "";

    private string? message;
    private User user = default!;
    private string? sharedKey;
    private string? authenticatorUri;
    private IEnumerable<string>? recoveryCodes;

    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        user = await UserAccessor.GetRequiredUserAsync(HttpContext);

        await LoadSharedKeyAndQrCodeUriAsync(user);
    }

    private async Task OnValidSubmitAsync()
    {
        // Strip spaces and hyphens
        var verificationCode = Input.Code.Replace(" ", string.Empty).Replace("-", string.Empty);

        var is2faTokenValid = await UserManager.VerifyTwoFactorTokenAsync(
            user, UserManager.Options.Tokens.AuthenticatorTokenProvider, verificationCode);

        if (!is2faTokenValid)
        {
            message = "Feil: Bekreftelseskode er ugyldig.";
            return;
        }

        await UserManager.SetTwoFactorEnabledAsync(user, true);
        var userId = await UserManager.GetUserIdAsync(user);
        Logger.LogInformation("Bruker med ID '{UserId}' har aktivert 2FA med en autentikator-app.", userId);

        message = "Din autentikator-app er verifisert.";

        if (await UserManager.CountRecoveryCodesAsync(user) == 0)
        {
            recoveryCodes = await UserManager.GenerateNewTwoFactorRecoveryCodesAsync(user, 10);
        }
        else
        {
            RedirectManager.RedirectToWithStatus("Account/Manage/TwoFactorAuthentication", message, HttpContext);
        }
    }

    private async ValueTask LoadSharedKeyAndQrCodeUriAsync(User user)
    {
        // Load the authenticator key & QR code URI to display on the form
        var unformattedKey = await UserManager.GetAuthenticatorKeyAsync(user);
        if (string.IsNullOrEmpty(unformattedKey))
        {
            await UserManager.ResetAuthenticatorKeyAsync(user);
            unformattedKey = await UserManager.GetAuthenticatorKeyAsync(user);
        }

        sharedKey = FormatKey(unformattedKey!);

        var email = await UserManager.GetEmailAsync(user);
        authenticatorUri = GenerateQrCodeUri(email!, unformattedKey!);

        var qrCode = QrCode.EncodeText(authenticatorUri, QrCode.Ecc.Medium);
        svgMarkup = qrCode.ToSvgString(4, "#000000", "#FFFFFF");
    }

    private string FormatKey(string unformattedKey)
    {
        var result = new StringBuilder();
        int currentPosition = 0;
        while (currentPosition + 4 < unformattedKey.Length)
        {
            result.Append(unformattedKey.AsSpan(currentPosition, 4)).Append(' ');
            currentPosition += 4;
        }
        if (currentPosition < unformattedKey.Length)
        {
            result.Append(unformattedKey.AsSpan(currentPosition));
        }

        return result.ToString().ToLowerInvariant();
    }

    private string GenerateQrCodeUri(string email, string unformattedKey)
    {
        var qr = string.Format(
            CultureInfo.InvariantCulture,
            AuthenticatorUriFormat,
            UrlEncoder.Encode("MenuPlanner"),
            UrlEncoder.Encode(email),
            unformattedKey);
        return qr;
    }

    private sealed class InputModel
    {
        [Required]
        [StringLength(7, ErrorMessage = "{0} må være minst {2} og maks {1} tegn lang.", MinimumLength = 6)]
        [DataType(DataType.Text)]
        [Display(Name = "Verifiseringskode")]
        public string Code { get; set; } = "";
    }
}

<script defer type="text/javascript" src="/lib/qrcodejs/qrcode.js"></script>
<script defer type="text/javascript" src="/js/qr.js"></script>