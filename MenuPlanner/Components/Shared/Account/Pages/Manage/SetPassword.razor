@page "/Account/Manage/SetPassword"

@inject AuthenticationStateProvider AuthenticationStateProvider
@inject UserManager<User> UserManager
@inject SignInManager<User> SignInManager
@inject IdentityUserAccessor UserAccessor
@inject IdentityRedirectManager RedirectManager

<PageTitle>Angi passord</PageTitle>

<h3>Angi passord</h3>
<StatusMessage Message="@message" />
<p class="alert alert-info">
    Du bruker ekstern innlogging via @loginProvider, og har ikke passord for dette nettstedet.
    Du kan legge til dette dersom du ikke vil bruke ekstern innlogging.
</p>
<div class="row">
    <div class="col-md-6">
        <EditForm Model="Input" FormName="set-password" OnValidSubmit="OnValidSubmitAsync" method="post">
            <DataAnnotationsValidator />
            <ValidationSummary class="text-danger" role="alert" />
            <div class="form-floating mb-3">
                <InputText type="password" @bind-Value="Input.NewPassword" class="form-control" autocomplete="new-password" placeholder="Velg passord" />
                <label for="new-password" class="form-label"><i class="bi bi-key"></i> Velg passord</label>
                <ValidationMessage For="() => Input.NewPassword" class="text-danger" />
            </div>
            <div class="form-floating mb-3">
                <InputText type="password" @bind-Value="Input.ConfirmPassword" class="form-control" autocomplete="new-password" placeholder="Gjenta passordet" />
                <label for="confirm-password" class="form-label"><i class="bi bi-key"></i> Gjenta passordet</label>
                <ValidationMessage For="() => Input.ConfirmPassword" class="text-danger" />
            </div>
            <button type="submit" class="w-100 btn btn-lg btn-success">
                <i class="bi bi-save"></i>
                Angi passord
            </button>
        </EditForm>
     </div>
</div>

@code {
    private string? message;
    private User user = default!;

    private string loginProvider = "???";

    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        user = await UserAccessor.GetRequiredUserAsync(HttpContext);

        loginProvider = await GetExternalLoginProvider();

        var hasPassword = await UserManager.HasPasswordAsync(user);
        if (hasPassword)
        {
            RedirectManager.RedirectTo("Account/Manage/ChangePassword");
        }
    }

    private async Task<string> GetExternalLoginProvider()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        var externalLoginClaim = user.FindFirst(ClaimTypes.AuthenticationMethod);

        return externalLoginClaim?.Value ?? "Unknown";
    }

    private async Task OnValidSubmitAsync()
    {
        var addPasswordResult = await UserManager.AddPasswordAsync(user, Input.NewPassword!);
        if (!addPasswordResult.Succeeded)
        {
            message = $"Feil: {string.Join(",", addPasswordResult.Errors.Select(error => error.Description))}";
            return;
        }

        await SignInManager.RefreshSignInAsync(user);
        RedirectManager.RedirectToCurrentPageWithStatus("Passordet er angitt.", HttpContext);
    }

    private sealed class InputModel
    {
        [Required]
        [StringLength(100, ErrorMessage = "{0} må være minst {2} og maks {1} tegn langt.", MinimumLength = 6)]
        [DataType(DataType.Password)]
        [Display(Name = "Angi passord")]
        public string? NewPassword { get; set; }

        [DataType(DataType.Password)]
        [Display(Name = "Gjenta passord")]
        [Compare("NewPassword", ErrorMessage = "Passordfeltene er ikke like")]
        public string? ConfirmPassword { get; set; }
    }
}
