@implements IDisposable
@inject NavigationManager Nav
@rendermode InteractiveServer

<AuthorizeView>
    <Authorized>
        <form action="Account/Logout" method="post">
            <AntiforgeryToken />
            <input type="hidden" name="ReturnUrl" value="@currentUrl" />
            <button type="submit"
                    class="btn btn-link"
                    alt="Logg ut"
                    title="Logg ut">
                <i class="bi bi-box-arrow-right icon-2x"></i>
            </button>
        </form>

        <button class="btn btn-link"
                @onclick="Account"
                alt="Gå til profilsiden din"
                title="Gå til profilsiden din">
            <i class="bi bi-person icon-2x"></i>
        </button>
    </Authorized>
    <NotAuthorized>
        <button class="btn btn-link"
                @onclick="Login"
                alt="Logg inn"
                title="Logg inn">
            <i class="bi bi-box-arrow-in-right icon-2x"></i>
        </button>

        <button class="btn btn-link"
                @onclick="Register"
                alt="Opprett ny brukerprofil"
                title="Opprett ny brukerprofil">
            <i class="bi bi-person-add icon-2x"></i>
        </button>
    </NotAuthorized>
</AuthorizeView>


@code {
    private string? currentUrl;

    protected override void OnInitialized()
    {
        currentUrl = Nav.ToBaseRelativePath(Nav.Uri);

        Nav.LocationChanged += OnLocationChanged;
    }

    private void Account()
    {
        Nav.NavigateTo("/Account/Manage");
    }

    private void Login()
    {
        Nav.NavigateTo($"/Account/Login/?ReturnUrl={currentUrl}");
    }

    private void Register()
    {
        Nav.NavigateTo("/Account/Register");
    }

    private void OnLocationChanged(object? sender, LocationChangedEventArgs e)
    {
        currentUrl = Nav.ToBaseRelativePath(e.Location);
        StateHasChanged();
    }

    public void Dispose()
    {
        Nav.LocationChanged -= OnLocationChanged;
    }
}
