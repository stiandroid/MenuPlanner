@page "/Account/LoginWithRecoveryCode"

@inject SignInManager<User> SignInManager
@inject UserManager<User> UserManager
@inject IdentityRedirectManager RedirectManager
@inject ILogger<LoginWithRecoveryCode> Logger
@inject NavigationManager Nav

<PageTitle>Verifisering av gjenopprettingskode</PageTitle>

<h1>Verifisering av gjenopprettingskode</h1>
<hr />
<StatusMessage Message="@message" />
<p>
    Du har bedt om å logge inn med en gjenopprettingskode. Denne innloggingen vil ikke bli husket
    inntil du angir en autentikator-app-kode ved innlogging eller deaktiverer 2FA og logger inn igjen.
</p>
<div class="row">
    <div class="col-md-4">
        <EditForm Model="Input" FormName="login-with-recovery-code" OnValidSubmit="OnValidSubmitAsync" method="post">
            <DataAnnotationsValidator />
            <ValidationSummary class="text-danger" role="alert" />
            <div class="form-floating mb-3">
                <InputText @bind-Value="Input.RecoveryCode" class="form-control" autocomplete="off" placeholder="RecoveryCode" />
                <label for="recovery-code" class="form-label"><i class="bi bi-key"></i> Gjenopprettingskode</label>
                <ValidationMessage For="() => Input.RecoveryCode" class="text-danger" />
            </div>
            <button type="submit" class="w-100 btn btn-lg btn-primary">
                <i class="bi bi-box-arrow-in-right"></i>
                Logg inn
            </button>
        </EditForm>
    </div>
</div>

@code {
    private string? message;
    private User user = default!;
    private User? nullUser;

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    [SupplyParameterFromQuery]
    private string? ReturnUrl { get; set; }

    protected override async Task OnInitializedAsync()
    {
        // Ensure the user has gone through the username & password screen first
        //user = await SignInManager.GetTwoFactorAuthenticationUserAsync()
        //?? throw new InvalidOperationException("Unable to load two-factor authentication user.");


        // Alternativ strategi:
        nullUser = await SignInManager.GetTwoFactorAuthenticationUserAsync();
        if (nullUser != null)
        {
            user = nullUser;
        }
        else
        {
            // Istedenfor å kaste en exception:
            Nav.NavigateTo("/Account/Login");
        }
    }

    private async Task OnValidSubmitAsync()
    {
        var recoveryCode = Input.RecoveryCode.Replace(" ", string.Empty);

        var result = await SignInManager.TwoFactorRecoveryCodeSignInAsync(recoveryCode);

        var userId = await UserManager.GetUserIdAsync(user);

        if (result.Succeeded)
        {
            Logger.LogInformation("User with ID '{UserId}' logged in with a recovery code.", userId);
            RedirectManager.RedirectTo(ReturnUrl);
        }
        else if (result.IsLockedOut)
        {
            Logger.LogWarning("User account locked out.");
            RedirectManager.RedirectTo("Account/Lockout");
        }
        else
        {
            Logger.LogWarning("Invalid recovery code entered for user with ID '{UserId}' ", userId);
            message = "Feil: Ugyldig gjenopprettingskode angitt.";
        }
    }

    private sealed class InputModel
    {
        [Required]
        [DataType(DataType.Text)]
        [Display(Name = "Gjenopprettingskode")]
        public string RecoveryCode { get; set; } = "";
    }
}
