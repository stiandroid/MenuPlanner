@page "/Account/Manage/ResetAuthenticator"

@inject UserManager<User> UserManager
@inject SignInManager<User> SignInManager
@inject IdentityUserAccessor UserAccessor
@inject IdentityRedirectManager RedirectManager
@inject ILogger<ResetAuthenticator> Logger

<PageTitle>Nullstill autentiseringsnøkkel</PageTitle>

<StatusMessage />
<h3>Nullstill autentiseringsnøkkel</h3>
<div class="alert alert-warning" role="alert">
    <p>
        <i class="bi bi-exclamation-triangle"></i>
        <strong>Hvis du nullstiller autentiseringsnøkkelen vil ikke autentiserings-appen fungere før du konfigurerer den på nytt.</strong>
    </p>
    <p>
        Denne prosessen deaktiverer 2FA fram til du verifiserer din autentiserings-app.
        Dersom du ikke fullfører konfigurasjonen av din autentiserings-app kan du miste tilgang til brukerkontoen din.
    </p>
</div>
<div>
    <form @formname="reset-authenticator" @onsubmit="OnSubmitAsync" method="post">
        <AntiforgeryToken />
        <button class="btn btn-danger" type="submit">
            <i class="bi bi-stars"></i>
            Nullstill autentiseringsnøkkel
        </button>
    </form>
</div>

@code {
    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    private async Task OnSubmitAsync()
    {
        var user = await UserAccessor.GetRequiredUserAsync(HttpContext);
        await UserManager.SetTwoFactorEnabledAsync(user, false);
        await UserManager.ResetAuthenticatorKeyAsync(user);
        var userId = await UserManager.GetUserIdAsync(user);
        Logger.LogInformation("User with ID '{UserId}' has reset their authentication app key.", userId);

        await SignInManager.RefreshSignInAsync(user);

        RedirectManager.RedirectToWithStatus(
            "Account/Manage/EnableAuthenticator",
            "Din autentikator-app-nøkkel har blitt nullstilt. For å konfigurere en autentikator-app på nytt, må du bruke den nye nøkkelen nedenfor.",
            HttpContext);
    }
}
