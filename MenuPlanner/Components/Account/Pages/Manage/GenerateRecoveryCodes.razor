@page "/Account/Manage/GenerateRecoveryCodes"

@using Microsoft.AspNetCore.Identity
@using MenuPlanner.Data

@inject UserManager<User> UserManager
@inject IdentityUserAccessor UserAccessor
@inject IdentityRedirectManager RedirectManager
@inject ILogger<GenerateRecoveryCodes> Logger

<PageTitle>Generere gjenopprettingskoder for to-faktor autentisering (2FA)</PageTitle>

@if (recoveryCodes is not null)
{
    <ShowRecoveryCodes RecoveryCodes="recoveryCodes.ToArray()" StatusMessage="@message" />
}
else
{
    <h3>Generere gjenopprettingskoder for to-faktor autentisering (2FA)</h3>
    <div class="alert alert-warning" role="alert">
        <p>
            <i class="bi bi-exclamation-triangle"></i>
            <strong>Oppbevar disse kodene på et sikkert sted.</strong>
        </p>
        <p>
            Dersom du mister telefonen med autentikator-appen, og du ikke har gjenopprettingskodene, vil du miste tilgangen til din brukerkonto.
        </p>
        <p>
            Selv om du genererer nye gjenopprettingskoder, så endres ikke nøklene brukt i autentikator-appen. Dersom du ønsker å endre nøkkelen
            som brukes i appen, bør du <a href="Account/Manage/ResetAuthenticator">nullstille dine autentikator-nøkler.</a>
        </p>
    </div>
    <div>
        <form @formname="generate-recovery-codes" @onsubmit="OnSubmitAsync" method="post">
            <AntiforgeryToken />
            <button class="btn btn-danger" type="submit">
                <i class="bi bi-arrow-clockwise"></i>
                Generer gjenopprettingskoder
            </button>
        </form>
    </div>
}

@code {
    private string? message;
    private User user = default!;
    private IEnumerable<string>? recoveryCodes;

    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    protected override async Task OnInitializedAsync()
    {
        user = await UserAccessor.GetRequiredUserAsync(HttpContext);

        var isTwoFactorEnabled = await UserManager.GetTwoFactorEnabledAsync(user);
        if (!isTwoFactorEnabled)
        {
            throw new InvalidOperationException("Cannot generate recovery codes for user because they do not have 2FA enabled.");
        }
    }

    private async Task OnSubmitAsync()
    {
        var userId = await UserManager.GetUserIdAsync(user);
        recoveryCodes = await UserManager.GenerateNewTwoFactorRecoveryCodesAsync(user, 10);
        message = "You have generated new recovery codes.";

        Logger.LogInformation("User with ID '{UserId}' has generated new 2FA recovery codes.", userId);
    }
}
