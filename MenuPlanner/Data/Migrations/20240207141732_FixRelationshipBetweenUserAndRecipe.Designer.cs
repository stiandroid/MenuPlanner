// <auto-generated />
using System;
using MenuPlanner.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace MenuPlanner.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20240207141732_FixRelationshipBetweenUserAndRecipe")]
    partial class FixRelationshipBetweenUserAndRecipe
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("MenuPlanner.Models.Entities.Allergen", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateUpdated")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Icon")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsPublished")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Allergens");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DateCreated = new DateTime(2024, 2, 7, 15, 17, 31, 73, DateTimeKind.Local).AddTicks(2604),
                            DateUpdated = new DateTime(2024, 2, 7, 15, 17, 31, 75, DateTimeKind.Local).AddTicks(6816),
                            Description = "Informasjon",
                            Icon = "",
                            Image = "crustacean.png",
                            IsPublished = true,
                            Name = "Krepsdyr",
                            Url = "krepsdyr"
                        },
                        new
                        {
                            Id = 2,
                            DateCreated = new DateTime(2024, 2, 7, 15, 17, 31, 75, DateTimeKind.Local).AddTicks(8007),
                            DateUpdated = new DateTime(2024, 2, 7, 15, 17, 31, 75, DateTimeKind.Local).AddTicks(8020),
                            Description = "Informasjon",
                            Icon = "",
                            Image = "sesame.png",
                            IsPublished = true,
                            Name = "Sesamfrø",
                            Url = "sesamfro"
                        },
                        new
                        {
                            Id = 3,
                            DateCreated = new DateTime(2024, 2, 7, 15, 17, 31, 75, DateTimeKind.Local).AddTicks(8024),
                            DateUpdated = new DateTime(2024, 2, 7, 15, 17, 31, 75, DateTimeKind.Local).AddTicks(8026),
                            Description = "Informasjon",
                            Icon = "",
                            Image = "nuts.png",
                            IsPublished = true,
                            Name = "Nøtter",
                            Url = "notter"
                        },
                        new
                        {
                            Id = 4,
                            DateCreated = new DateTime(2024, 2, 7, 15, 17, 31, 75, DateTimeKind.Local).AddTicks(8030),
                            DateUpdated = new DateTime(2024, 2, 7, 15, 17, 31, 75, DateTimeKind.Local).AddTicks(8032),
                            Description = "Informasjon",
                            Icon = "",
                            Image = "gluten.png",
                            IsPublished = true,
                            Name = "Gluten",
                            Url = "gluten"
                        },
                        new
                        {
                            Id = 5,
                            DateCreated = new DateTime(2024, 2, 7, 15, 17, 31, 75, DateTimeKind.Local).AddTicks(8035),
                            DateUpdated = new DateTime(2024, 2, 7, 15, 17, 31, 75, DateTimeKind.Local).AddTicks(8037),
                            Description = "Informasjon",
                            Icon = "",
                            Image = "egg.png",
                            IsPublished = true,
                            Name = "Egg",
                            Url = "egg"
                        },
                        new
                        {
                            Id = 6,
                            DateCreated = new DateTime(2024, 2, 7, 15, 17, 31, 75, DateTimeKind.Local).AddTicks(8041),
                            DateUpdated = new DateTime(2024, 2, 7, 15, 17, 31, 75, DateTimeKind.Local).AddTicks(8043),
                            Description = "Informasjon",
                            Icon = "",
                            Image = "fish.png",
                            IsPublished = true,
                            Name = "Fisk",
                            Url = "fisk"
                        },
                        new
                        {
                            Id = 7,
                            DateCreated = new DateTime(2024, 2, 7, 15, 17, 31, 75, DateTimeKind.Local).AddTicks(8046),
                            DateUpdated = new DateTime(2024, 2, 7, 15, 17, 31, 75, DateTimeKind.Local).AddTicks(8048),
                            Description = "Informasjon",
                            Icon = "",
                            Image = "shellfish.png",
                            IsPublished = true,
                            Name = "Skalldyr",
                            Url = "skalldyr"
                        },
                        new
                        {
                            Id = 8,
                            DateCreated = new DateTime(2024, 2, 7, 15, 17, 31, 75, DateTimeKind.Local).AddTicks(8078),
                            DateUpdated = new DateTime(2024, 2, 7, 15, 17, 31, 75, DateTimeKind.Local).AddTicks(8080),
                            Description = "Informasjon",
                            Icon = "",
                            Image = "mustard.png",
                            IsPublished = true,
                            Name = "Sennep",
                            Url = "sennep"
                        },
                        new
                        {
                            Id = 9,
                            DateCreated = new DateTime(2024, 2, 7, 15, 17, 31, 75, DateTimeKind.Local).AddTicks(8084),
                            DateUpdated = new DateTime(2024, 2, 7, 15, 17, 31, 75, DateTimeKind.Local).AddTicks(8086),
                            Description = "Informasjon",
                            Icon = "",
                            Image = "celery.png",
                            IsPublished = true,
                            Name = "Selleri",
                            Url = "selleri"
                        },
                        new
                        {
                            Id = 10,
                            DateCreated = new DateTime(2024, 2, 7, 15, 17, 31, 75, DateTimeKind.Local).AddTicks(8089),
                            DateUpdated = new DateTime(2024, 2, 7, 15, 17, 31, 75, DateTimeKind.Local).AddTicks(8091),
                            Description = "Informasjon",
                            Icon = "",
                            Image = "peanuts.png",
                            IsPublished = true,
                            Name = "Peanøtter",
                            Url = "peanotter"
                        },
                        new
                        {
                            Id = 11,
                            DateCreated = new DateTime(2024, 2, 7, 15, 17, 31, 75, DateTimeKind.Local).AddTicks(8094),
                            DateUpdated = new DateTime(2024, 2, 7, 15, 17, 31, 75, DateTimeKind.Local).AddTicks(8096),
                            Description = "Informasjon",
                            Icon = "",
                            Image = "milk.png",
                            IsPublished = true,
                            Name = "Melk",
                            Url = "melk"
                        },
                        new
                        {
                            Id = 12,
                            DateCreated = new DateTime(2024, 2, 7, 15, 17, 31, 75, DateTimeKind.Local).AddTicks(8099),
                            DateUpdated = new DateTime(2024, 2, 7, 15, 17, 31, 75, DateTimeKind.Local).AddTicks(8101),
                            Description = "Informasjon",
                            Icon = "",
                            Image = "sulphite.png",
                            IsPublished = true,
                            Name = "Sulfitt",
                            Url = "sulfitt"
                        },
                        new
                        {
                            Id = 13,
                            DateCreated = new DateTime(2024, 2, 7, 15, 17, 31, 75, DateTimeKind.Local).AddTicks(8104),
                            DateUpdated = new DateTime(2024, 2, 7, 15, 17, 31, 75, DateTimeKind.Local).AddTicks(8106),
                            Description = "Informasjon",
                            Icon = "",
                            Image = "",
                            IsPublished = true,
                            Name = "Soya",
                            Url = "soya"
                        },
                        new
                        {
                            Id = 14,
                            DateCreated = new DateTime(2024, 2, 7, 15, 17, 31, 75, DateTimeKind.Local).AddTicks(8109),
                            DateUpdated = new DateTime(2024, 2, 7, 15, 17, 31, 75, DateTimeKind.Local).AddTicks(8111),
                            Description = "Informasjon",
                            Icon = "",
                            Image = "",
                            IsPublished = true,
                            Name = "Lupin",
                            Url = "lupin"
                        });
                });

            modelBuilder.Entity("MenuPlanner.Models.Entities.Country", b =>
                {
                    b.Property<string>("ISO3166_2")
                        .HasMaxLength(2)
                        .HasColumnType("nvarchar(2)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ISO3166_2");

                    b.ToTable("Countries");

                    b.HasData(
                        new
                        {
                            ISO3166_2 = "DE",
                            Name = "Tyskland"
                        },
                        new
                        {
                            ISO3166_2 = "DK",
                            Name = "Danmark"
                        },
                        new
                        {
                            ISO3166_2 = "ES",
                            Name = "Spania"
                        },
                        new
                        {
                            ISO3166_2 = "FR",
                            Name = "Frankrike"
                        },
                        new
                        {
                            ISO3166_2 = "GR",
                            Name = "Hellas"
                        },
                        new
                        {
                            ISO3166_2 = "IT",
                            Name = "Italia"
                        },
                        new
                        {
                            ISO3166_2 = "JP",
                            Name = "Japan"
                        },
                        new
                        {
                            ISO3166_2 = "MX",
                            Name = "Mexico"
                        },
                        new
                        {
                            ISO3166_2 = "NO",
                            Name = "Norge"
                        },
                        new
                        {
                            ISO3166_2 = "PT",
                            Name = "Portugal"
                        },
                        new
                        {
                            ISO3166_2 = "SE",
                            Name = "Sverige"
                        },
                        new
                        {
                            ISO3166_2 = "TH",
                            Name = "Thailand"
                        });
                });

            modelBuilder.Entity("MenuPlanner.Models.Entities.Ingredient", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateUpdated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateVerified")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("EnergyKcalPer100g")
                        .HasColumnType("float");

                    b.Property<bool>("HasImage")
                        .HasColumnType("bit");

                    b.Property<bool>("IsNutritionallyVerified")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPublished")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("VerificationAuthority")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("VerificationAuthorityPerson")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Ingredients");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DateCreated = new DateTime(2024, 2, 7, 15, 17, 31, 76, DateTimeKind.Local).AddTicks(279),
                            DateUpdated = new DateTime(2024, 2, 7, 15, 17, 31, 76, DateTimeKind.Local).AddTicks(591),
                            Description = "Informasjon",
                            EnergyKcalPer100g = 0.0,
                            HasImage = false,
                            IsNutritionallyVerified = false,
                            IsPublished = true,
                            Name = "Hvetemel",
                            Type = 4,
                            Url = "hvetemel"
                        },
                        new
                        {
                            Id = 2,
                            DateCreated = new DateTime(2024, 2, 7, 15, 17, 31, 76, DateTimeKind.Local).AddTicks(2133),
                            DateUpdated = new DateTime(2024, 2, 7, 15, 17, 31, 76, DateTimeKind.Local).AddTicks(2145),
                            Description = "Informasjon",
                            EnergyKcalPer100g = 0.0,
                            HasImage = false,
                            IsNutritionallyVerified = false,
                            IsPublished = true,
                            Name = "Sammalt hvete, grovmalt",
                            Type = 4,
                            Url = "sammalt-hvete-grovmalt"
                        },
                        new
                        {
                            Id = 3,
                            DateCreated = new DateTime(2024, 2, 7, 15, 17, 31, 76, DateTimeKind.Local).AddTicks(2152),
                            DateUpdated = new DateTime(2024, 2, 7, 15, 17, 31, 76, DateTimeKind.Local).AddTicks(2154),
                            Description = "Informasjon",
                            EnergyKcalPer100g = 0.0,
                            HasImage = false,
                            IsNutritionallyVerified = false,
                            IsPublished = true,
                            Name = "Sammalt hvete, finmalt",
                            Type = 4,
                            Url = "sammalt-hvete-finmalt"
                        },
                        new
                        {
                            Id = 4,
                            DateCreated = new DateTime(2024, 2, 7, 15, 17, 31, 76, DateTimeKind.Local).AddTicks(2160),
                            DateUpdated = new DateTime(2024, 2, 7, 15, 17, 31, 76, DateTimeKind.Local).AddTicks(2163),
                            Description = "Informasjon",
                            EnergyKcalPer100g = 0.0,
                            HasImage = false,
                            IsNutritionallyVerified = false,
                            IsPublished = true,
                            Name = "Hvete helkorn",
                            Type = 4,
                            Url = "hvete-helkorn"
                        },
                        new
                        {
                            Id = 5,
                            DateCreated = new DateTime(2024, 2, 7, 15, 17, 31, 76, DateTimeKind.Local).AddTicks(2168),
                            DateUpdated = new DateTime(2024, 2, 7, 15, 17, 31, 76, DateTimeKind.Local).AddTicks(2171),
                            Description = "Informasjon",
                            EnergyKcalPer100g = 0.0,
                            HasImage = false,
                            IsNutritionallyVerified = false,
                            IsPublished = true,
                            Name = "Havregryn, lettkokt",
                            Type = 4,
                            Url = "havregryn-lettkokt"
                        },
                        new
                        {
                            Id = 6,
                            DateCreated = new DateTime(2024, 2, 7, 15, 17, 31, 76, DateTimeKind.Local).AddTicks(2199),
                            DateUpdated = new DateTime(2024, 2, 7, 15, 17, 31, 76, DateTimeKind.Local).AddTicks(2202),
                            Description = "Informasjon",
                            EnergyKcalPer100g = 0.0,
                            HasImage = false,
                            IsNutritionallyVerified = false,
                            IsPublished = true,
                            Name = "Havregryn, store",
                            Type = 4,
                            Url = "havregryn-store"
                        },
                        new
                        {
                            Id = 7,
                            DateCreated = new DateTime(2024, 2, 7, 15, 17, 31, 76, DateTimeKind.Local).AddTicks(2208),
                            DateUpdated = new DateTime(2024, 2, 7, 15, 17, 31, 76, DateTimeKind.Local).AddTicks(2210),
                            Description = "Informasjon",
                            EnergyKcalPer100g = 0.0,
                            HasImage = false,
                            IsNutritionallyVerified = false,
                            IsPublished = true,
                            Name = "Havregryn, glutenfri",
                            Type = 4,
                            Url = "havregryn-glutenfri"
                        },
                        new
                        {
                            Id = 8,
                            DateCreated = new DateTime(2024, 2, 7, 15, 17, 31, 76, DateTimeKind.Local).AddTicks(2216),
                            DateUpdated = new DateTime(2024, 2, 7, 15, 17, 31, 76, DateTimeKind.Local).AddTicks(2218),
                            Description = "Informasjon",
                            EnergyKcalPer100g = 0.0,
                            HasImage = false,
                            IsNutritionallyVerified = false,
                            IsPublished = true,
                            Name = "Havremel",
                            Type = 4,
                            Url = "havremel"
                        },
                        new
                        {
                            Id = 9,
                            DateCreated = new DateTime(2024, 2, 7, 15, 17, 31, 76, DateTimeKind.Local).AddTicks(2224),
                            DateUpdated = new DateTime(2024, 2, 7, 15, 17, 31, 76, DateTimeKind.Local).AddTicks(2226),
                            Description = "Informasjon",
                            EnergyKcalPer100g = 0.0,
                            HasImage = false,
                            IsNutritionallyVerified = false,
                            IsPublished = true,
                            Name = "Rug, helkorn",
                            Type = 4,
                            Url = "rug-helkorn"
                        },
                        new
                        {
                            Id = 10,
                            DateCreated = new DateTime(2024, 2, 7, 15, 17, 31, 76, DateTimeKind.Local).AddTicks(2231),
                            DateUpdated = new DateTime(2024, 2, 7, 15, 17, 31, 76, DateTimeKind.Local).AddTicks(2234),
                            Description = "Informasjon",
                            EnergyKcalPer100g = 0.0,
                            HasImage = false,
                            IsNutritionallyVerified = false,
                            IsPublished = true,
                            Name = "Rugmel",
                            Type = 4,
                            Url = "rugmel"
                        },
                        new
                        {
                            Id = 11,
                            DateCreated = new DateTime(2024, 2, 7, 15, 17, 31, 76, DateTimeKind.Local).AddTicks(2239),
                            DateUpdated = new DateTime(2024, 2, 7, 15, 17, 31, 76, DateTimeKind.Local).AddTicks(2241),
                            Description = "Informasjon",
                            EnergyKcalPer100g = 0.0,
                            HasImage = false,
                            IsNutritionallyVerified = false,
                            IsPublished = true,
                            Name = "Bygg, helkorn",
                            Type = 4,
                            Url = "bygg-helkorn"
                        },
                        new
                        {
                            Id = 12,
                            DateCreated = new DateTime(2024, 2, 7, 15, 17, 31, 76, DateTimeKind.Local).AddTicks(2247),
                            DateUpdated = new DateTime(2024, 2, 7, 15, 17, 31, 76, DateTimeKind.Local).AddTicks(2249),
                            Description = "Informasjon",
                            EnergyKcalPer100g = 0.0,
                            HasImage = false,
                            IsNutritionallyVerified = false,
                            IsPublished = true,
                            Name = "Byggmel",
                            Type = 4,
                            Url = "byggmel"
                        },
                        new
                        {
                            Id = 13,
                            DateCreated = new DateTime(2024, 2, 7, 15, 17, 31, 76, DateTimeKind.Local).AddTicks(2254),
                            DateUpdated = new DateTime(2024, 2, 7, 15, 17, 31, 76, DateTimeKind.Local).AddTicks(2256),
                            Description = "Informasjon",
                            EnergyKcalPer100g = 0.0,
                            HasImage = false,
                            IsNutritionallyVerified = false,
                            IsPublished = true,
                            Name = "Gresskarkjerner",
                            Type = 4,
                            Url = "gresskarkjerner"
                        },
                        new
                        {
                            Id = 14,
                            DateCreated = new DateTime(2024, 2, 7, 15, 17, 31, 76, DateTimeKind.Local).AddTicks(2262),
                            DateUpdated = new DateTime(2024, 2, 7, 15, 17, 31, 76, DateTimeKind.Local).AddTicks(2264),
                            Description = "Informasjon",
                            EnergyKcalPer100g = 0.0,
                            HasImage = false,
                            IsNutritionallyVerified = false,
                            IsPublished = true,
                            Name = "Skummet melk",
                            Type = 2,
                            Url = "skummet-melk"
                        },
                        new
                        {
                            Id = 15,
                            DateCreated = new DateTime(2024, 2, 7, 15, 17, 31, 76, DateTimeKind.Local).AddTicks(2270),
                            DateUpdated = new DateTime(2024, 2, 7, 15, 17, 31, 76, DateTimeKind.Local).AddTicks(2272),
                            Description = "Informasjon",
                            EnergyKcalPer100g = 41.0,
                            HasImage = false,
                            IsNutritionallyVerified = false,
                            IsPublished = true,
                            Name = "Lettmelk",
                            Type = 2,
                            Url = "lettmelk"
                        },
                        new
                        {
                            Id = 16,
                            DateCreated = new DateTime(2024, 2, 7, 15, 17, 31, 76, DateTimeKind.Local).AddTicks(2606),
                            DateUpdated = new DateTime(2024, 2, 7, 15, 17, 31, 76, DateTimeKind.Local).AddTicks(2614),
                            Description = "Informasjon",
                            EnergyKcalPer100g = 0.0,
                            HasImage = false,
                            IsNutritionallyVerified = false,
                            IsPublished = true,
                            Name = "Helmelk",
                            Type = 2,
                            Url = "helmelk"
                        },
                        new
                        {
                            Id = 17,
                            DateCreated = new DateTime(2024, 2, 7, 15, 17, 31, 76, DateTimeKind.Local).AddTicks(2620),
                            DateUpdated = new DateTime(2024, 2, 7, 15, 17, 31, 76, DateTimeKind.Local).AddTicks(2622),
                            Description = "Informasjon",
                            EnergyKcalPer100g = 0.0,
                            HasImage = false,
                            IsNutritionallyVerified = false,
                            IsPublished = true,
                            Name = "Kremfløte",
                            Type = 2,
                            Url = "kremflote"
                        },
                        new
                        {
                            Id = 18,
                            DateCreated = new DateTime(2024, 2, 7, 15, 17, 31, 76, DateTimeKind.Local).AddTicks(2628),
                            DateUpdated = new DateTime(2024, 2, 7, 15, 17, 31, 76, DateTimeKind.Local).AddTicks(2648),
                            Description = "Informasjon",
                            EnergyKcalPer100g = 0.0,
                            HasImage = false,
                            IsNutritionallyVerified = false,
                            IsPublished = true,
                            Name = "Matfløte",
                            Type = 2,
                            Url = "matflote"
                        },
                        new
                        {
                            Id = 19,
                            DateCreated = new DateTime(2024, 2, 7, 15, 17, 31, 76, DateTimeKind.Local).AddTicks(2655),
                            DateUpdated = new DateTime(2024, 2, 7, 15, 17, 31, 76, DateTimeKind.Local).AddTicks(2657),
                            Description = "Informasjon",
                            EnergyKcalPer100g = 0.0,
                            HasImage = false,
                            IsNutritionallyVerified = false,
                            IsPublished = true,
                            Name = "Lettrømme",
                            Type = 2,
                            Url = "lettromme"
                        },
                        new
                        {
                            Id = 20,
                            DateCreated = new DateTime(2024, 2, 7, 15, 17, 31, 76, DateTimeKind.Local).AddTicks(2662),
                            DateUpdated = new DateTime(2024, 2, 7, 15, 17, 31, 76, DateTimeKind.Local).AddTicks(2664),
                            Description = "Informasjon",
                            EnergyKcalPer100g = 0.0,
                            HasImage = false,
                            IsNutritionallyVerified = false,
                            IsPublished = true,
                            Name = "Seterrømme",
                            Type = 2,
                            Url = "seterromme"
                        },
                        new
                        {
                            Id = 21,
                            DateCreated = new DateTime(2024, 2, 7, 15, 17, 31, 76, DateTimeKind.Local).AddTicks(2670),
                            DateUpdated = new DateTime(2024, 2, 7, 15, 17, 31, 76, DateTimeKind.Local).AddTicks(2673),
                            Description = "Informasjon",
                            EnergyKcalPer100g = 0.0,
                            HasImage = false,
                            IsNutritionallyVerified = false,
                            IsPublished = true,
                            Name = "Rømmekolle",
                            Type = 2,
                            Url = "rommekolle"
                        },
                        new
                        {
                            Id = 22,
                            DateCreated = new DateTime(2024, 2, 7, 15, 17, 31, 76, DateTimeKind.Local).AddTicks(2678),
                            DateUpdated = new DateTime(2024, 2, 7, 15, 17, 31, 76, DateTimeKind.Local).AddTicks(2680),
                            Description = "Informasjon",
                            EnergyKcalPer100g = 0.0,
                            HasImage = false,
                            IsNutritionallyVerified = false,
                            IsPublished = true,
                            Name = "Kvarg",
                            Type = 2,
                            Url = "kvarg"
                        },
                        new
                        {
                            Id = 23,
                            DateCreated = new DateTime(2024, 2, 7, 15, 17, 31, 76, DateTimeKind.Local).AddTicks(2732),
                            DateUpdated = new DateTime(2024, 2, 7, 15, 17, 31, 76, DateTimeKind.Local).AddTicks(2735),
                            Description = "Egg fra høne. Oppskrifter tar som regel utgangspunkt i middels store egg. Dersom eggene du har er spesielt små eller store kan du måtte justere antallet.",
                            EnergyKcalPer100g = 0.0,
                            HasImage = false,
                            IsNutritionallyVerified = false,
                            IsPublished = true,
                            Name = "Egg",
                            Type = 8,
                            Url = "egg"
                        },
                        new
                        {
                            Id = 24,
                            DateCreated = new DateTime(2024, 2, 7, 15, 17, 31, 76, DateTimeKind.Local).AddTicks(2742),
                            DateUpdated = new DateTime(2024, 2, 7, 15, 17, 31, 76, DateTimeKind.Local).AddTicks(2744),
                            Description = "Eggeplomme fra hønseegg. Oppskrifter tar som regel utgangspunkt i middels store egg. Dersom oppskriften oppgir eggeplommer i antall, og eggene du har er spesielt små eller store kan du måtte justere antallet.",
                            EnergyKcalPer100g = 0.0,
                            HasImage = false,
                            IsNutritionallyVerified = false,
                            IsPublished = true,
                            Name = "Eggeplomme",
                            Type = 8,
                            Url = "eggeplomme"
                        },
                        new
                        {
                            Id = 25,
                            DateCreated = new DateTime(2024, 2, 7, 15, 17, 31, 76, DateTimeKind.Local).AddTicks(2750),
                            DateUpdated = new DateTime(2024, 2, 7, 15, 17, 31, 76, DateTimeKind.Local).AddTicks(2752),
                            Description = "Eggehvite fra hønseegg. Oppskrifter tar som regel utgangspunkt i middels store egg. Dersom oppskriften oppgir eggehviter i antall, og eggene du har er spesielt små eller store kan du måtte justere antallet.",
                            EnergyKcalPer100g = 0.0,
                            HasImage = false,
                            IsNutritionallyVerified = false,
                            IsPublished = true,
                            Name = "Eggehvite",
                            Type = 8,
                            Url = "eggehvite"
                        },
                        new
                        {
                            Id = 26,
                            DateCreated = new DateTime(2024, 2, 7, 15, 17, 31, 76, DateTimeKind.Local).AddTicks(2758),
                            DateUpdated = new DateTime(2024, 2, 7, 15, 17, 31, 76, DateTimeKind.Local).AddTicks(2760),
                            Description = "Egg fra vaktel.",
                            EnergyKcalPer100g = 0.0,
                            HasImage = false,
                            IsNutritionallyVerified = false,
                            IsPublished = true,
                            Name = "Vaktelegg",
                            Type = 8,
                            Url = "vaktelegg"
                        },
                        new
                        {
                            Id = 27,
                            DateCreated = new DateTime(2024, 2, 7, 15, 17, 31, 76, DateTimeKind.Local).AddTicks(2765),
                            DateUpdated = new DateTime(2024, 2, 7, 15, 17, 31, 76, DateTimeKind.Local).AddTicks(2768),
                            Description = "Egg fra måke (måse).",
                            EnergyKcalPer100g = 0.0,
                            HasImage = false,
                            IsNutritionallyVerified = false,
                            IsPublished = true,
                            Name = "Måsegg",
                            Type = 8,
                            Url = "masegg"
                        },
                        new
                        {
                            Id = 28,
                            DateCreated = new DateTime(2024, 2, 7, 15, 17, 31, 76, DateTimeKind.Local).AddTicks(2774),
                            DateUpdated = new DateTime(2024, 2, 7, 15, 17, 31, 76, DateTimeKind.Local).AddTicks(2776),
                            Description = "Informasjon",
                            EnergyKcalPer100g = 0.0,
                            HasImage = false,
                            IsNutritionallyVerified = false,
                            IsPublished = true,
                            Name = "Salt",
                            Type = 14,
                            Url = "salt"
                        },
                        new
                        {
                            Id = 29,
                            DateCreated = new DateTime(2024, 2, 7, 15, 17, 31, 76, DateTimeKind.Local).AddTicks(2782),
                            DateUpdated = new DateTime(2024, 2, 7, 15, 17, 31, 76, DateTimeKind.Local).AddTicks(2784),
                            Description = "Informasjon",
                            EnergyKcalPer100g = 0.0,
                            HasImage = false,
                            IsNutritionallyVerified = false,
                            IsPublished = true,
                            Name = "Tomatketsjup",
                            Type = 14,
                            Url = "tomatketsjup"
                        },
                        new
                        {
                            Id = 30,
                            DateCreated = new DateTime(2024, 2, 7, 15, 17, 31, 76, DateTimeKind.Local).AddTicks(2789),
                            DateUpdated = new DateTime(2024, 2, 7, 15, 17, 31, 76, DateTimeKind.Local).AddTicks(2791),
                            Description = "Informasjon",
                            EnergyKcalPer100g = 0.0,
                            HasImage = false,
                            IsNutritionallyVerified = false,
                            IsPublished = true,
                            Name = "Søt sennep",
                            Type = 14,
                            Url = "sot-sennep"
                        },
                        new
                        {
                            Id = 31,
                            DateCreated = new DateTime(2024, 2, 7, 15, 17, 31, 76, DateTimeKind.Local).AddTicks(2808),
                            DateUpdated = new DateTime(2024, 2, 7, 15, 17, 31, 76, DateTimeKind.Local).AddTicks(2810),
                            Description = "Informasjon",
                            EnergyKcalPer100g = 0.0,
                            HasImage = false,
                            IsNutritionallyVerified = false,
                            IsPublished = true,
                            Name = "Sterk sennep",
                            Type = 14,
                            Url = "sterk-sennep"
                        },
                        new
                        {
                            Id = 32,
                            DateCreated = new DateTime(2024, 2, 7, 15, 17, 31, 76, DateTimeKind.Local).AddTicks(2816),
                            DateUpdated = new DateTime(2024, 2, 7, 15, 17, 31, 76, DateTimeKind.Local).AddTicks(2819),
                            Description = "Informasjon",
                            EnergyKcalPer100g = 0.0,
                            HasImage = false,
                            IsNutritionallyVerified = false,
                            IsPublished = true,
                            Name = "Dijonsennep",
                            Type = 14,
                            Url = "dijonsennep"
                        },
                        new
                        {
                            Id = 33,
                            DateCreated = new DateTime(2024, 2, 7, 15, 17, 31, 76, DateTimeKind.Local).AddTicks(2824),
                            DateUpdated = new DateTime(2024, 2, 7, 15, 17, 31, 76, DateTimeKind.Local).AddTicks(2826),
                            Description = "Informasjon",
                            EnergyKcalPer100g = 0.0,
                            HasImage = false,
                            IsNutritionallyVerified = false,
                            IsPublished = true,
                            Name = "Grov sennep",
                            Type = 14,
                            Url = "grov-sennep"
                        },
                        new
                        {
                            Id = 34,
                            DateCreated = new DateTime(2024, 2, 7, 15, 17, 31, 76, DateTimeKind.Local).AddTicks(2832),
                            DateUpdated = new DateTime(2024, 2, 7, 15, 17, 31, 76, DateTimeKind.Local).AddTicks(2834),
                            Description = "Informasjon",
                            EnergyKcalPer100g = 0.0,
                            HasImage = false,
                            IsNutritionallyVerified = false,
                            IsPublished = true,
                            Name = "Soyasaus",
                            Type = 14,
                            Url = "soyasaus"
                        },
                        new
                        {
                            Id = 35,
                            DateCreated = new DateTime(2024, 2, 7, 15, 17, 31, 76, DateTimeKind.Local).AddTicks(2840),
                            DateUpdated = new DateTime(2024, 2, 7, 15, 17, 31, 76, DateTimeKind.Local).AddTicks(2842),
                            Description = "Informasjon",
                            EnergyKcalPer100g = 0.0,
                            HasImage = false,
                            IsNutritionallyVerified = false,
                            IsPublished = true,
                            Name = "Saltredusert soyasaus",
                            Type = 14,
                            Url = "saltredusert-soyasaus"
                        },
                        new
                        {
                            Id = 36,
                            DateCreated = new DateTime(2024, 2, 7, 15, 17, 31, 76, DateTimeKind.Local).AddTicks(2848),
                            DateUpdated = new DateTime(2024, 2, 7, 15, 17, 31, 76, DateTimeKind.Local).AddTicks(2850),
                            Description = "35%",
                            EnergyKcalPer100g = 0.0,
                            HasImage = false,
                            IsNutritionallyVerified = false,
                            IsPublished = true,
                            Name = "Eddikessens",
                            Type = 14,
                            Url = "eddikessens"
                        },
                        new
                        {
                            Id = 37,
                            DateCreated = new DateTime(2024, 2, 7, 15, 17, 31, 76, DateTimeKind.Local).AddTicks(2856),
                            DateUpdated = new DateTime(2024, 2, 7, 15, 17, 31, 76, DateTimeKind.Local).AddTicks(2858),
                            Description = "7%",
                            EnergyKcalPer100g = 0.0,
                            HasImage = false,
                            IsNutritionallyVerified = false,
                            IsPublished = true,
                            Name = "Klar eddik",
                            Type = 14,
                            Url = "klar-eddik"
                        },
                        new
                        {
                            Id = 38,
                            DateCreated = new DateTime(2024, 2, 7, 15, 17, 31, 76, DateTimeKind.Local).AddTicks(2864),
                            DateUpdated = new DateTime(2024, 2, 7, 15, 17, 31, 76, DateTimeKind.Local).AddTicks(2866),
                            Description = "7%",
                            EnergyKcalPer100g = 0.0,
                            HasImage = false,
                            IsNutritionallyVerified = false,
                            IsPublished = true,
                            Name = "Brun eddik",
                            Type = 14,
                            Url = "brun-eddik"
                        },
                        new
                        {
                            Id = 39,
                            DateCreated = new DateTime(2024, 2, 7, 15, 17, 31, 76, DateTimeKind.Local).AddTicks(2872),
                            DateUpdated = new DateTime(2024, 2, 7, 15, 17, 31, 76, DateTimeKind.Local).AddTicks(2874),
                            Description = "Informasjon",
                            EnergyKcalPer100g = 0.0,
                            HasImage = false,
                            IsNutritionallyVerified = false,
                            IsPublished = true,
                            Name = "Eplecidereddik",
                            Type = 14,
                            Url = "eplecidereddik"
                        },
                        new
                        {
                            Id = 40,
                            DateCreated = new DateTime(2024, 2, 7, 15, 17, 31, 76, DateTimeKind.Local).AddTicks(2880),
                            DateUpdated = new DateTime(2024, 2, 7, 15, 17, 31, 76, DateTimeKind.Local).AddTicks(2882),
                            Description = "Informasjon",
                            EnergyKcalPer100g = 0.0,
                            HasImage = false,
                            IsNutritionallyVerified = false,
                            IsPublished = true,
                            Name = "Hvitvinseddik",
                            Type = 14,
                            Url = "hvitvinseddik"
                        },
                        new
                        {
                            Id = 41,
                            DateCreated = new DateTime(2024, 2, 7, 15, 17, 31, 76, DateTimeKind.Local).AddTicks(2888),
                            DateUpdated = new DateTime(2024, 2, 7, 15, 17, 31, 76, DateTimeKind.Local).AddTicks(2891),
                            Description = "Informasjon",
                            EnergyKcalPer100g = 0.0,
                            HasImage = false,
                            IsNutritionallyVerified = false,
                            IsPublished = true,
                            Name = "Rødvinseddik",
                            Type = 14,
                            Url = "rodvinseddik"
                        },
                        new
                        {
                            Id = 42,
                            DateCreated = new DateTime(2024, 2, 7, 15, 17, 31, 76, DateTimeKind.Local).AddTicks(2897),
                            DateUpdated = new DateTime(2024, 2, 7, 15, 17, 31, 76, DateTimeKind.Local).AddTicks(2899),
                            Description = "Informasjon",
                            EnergyKcalPer100g = 0.0,
                            HasImage = false,
                            IsNutritionallyVerified = false,
                            IsPublished = true,
                            Name = "Sitrondråper",
                            Type = 14,
                            Url = "sitrondråper"
                        },
                        new
                        {
                            Id = 43,
                            DateCreated = new DateTime(2024, 2, 7, 15, 17, 31, 76, DateTimeKind.Local).AddTicks(2904),
                            DateUpdated = new DateTime(2024, 2, 7, 15, 17, 31, 76, DateTimeKind.Local).AddTicks(2907),
                            Description = "Informasjon",
                            EnergyKcalPer100g = 0.0,
                            HasImage = false,
                            IsNutritionallyVerified = false,
                            IsPublished = true,
                            Name = "Smør",
                            Type = 2,
                            Url = "smor"
                        },
                        new
                        {
                            Id = 44,
                            DateCreated = new DateTime(2024, 2, 7, 15, 17, 31, 76, DateTimeKind.Local).AddTicks(2924),
                            DateUpdated = new DateTime(2024, 2, 7, 15, 17, 31, 76, DateTimeKind.Local).AddTicks(2926),
                            Description = "Informasjon",
                            EnergyKcalPer100g = 0.0,
                            HasImage = false,
                            IsNutritionallyVerified = false,
                            IsPublished = true,
                            Name = "Margarin",
                            Type = 3,
                            Url = "margarin"
                        },
                        new
                        {
                            Id = 45,
                            DateCreated = new DateTime(2024, 2, 7, 15, 17, 31, 76, DateTimeKind.Local).AddTicks(2931),
                            DateUpdated = new DateTime(2024, 2, 7, 15, 17, 31, 76, DateTimeKind.Local).AddTicks(2934),
                            Description = "Informasjon",
                            EnergyKcalPer100g = 0.0,
                            HasImage = false,
                            IsNutritionallyVerified = false,
                            IsPublished = true,
                            Name = "Sukker",
                            Type = 13,
                            Url = "sukker"
                        },
                        new
                        {
                            Id = 46,
                            DateCreated = new DateTime(2024, 2, 7, 15, 17, 31, 76, DateTimeKind.Local).AddTicks(2939),
                            DateUpdated = new DateTime(2024, 2, 7, 15, 17, 31, 76, DateTimeKind.Local).AddTicks(2942),
                            Description = "Informasjon",
                            EnergyKcalPer100g = 0.0,
                            HasImage = false,
                            IsNutritionallyVerified = false,
                            IsPublished = true,
                            Name = "Blåbær",
                            Type = 1,
                            Url = "blabar"
                        },
                        new
                        {
                            Id = 47,
                            DateCreated = new DateTime(2024, 2, 7, 15, 17, 31, 76, DateTimeKind.Local).AddTicks(2948),
                            DateUpdated = new DateTime(2024, 2, 7, 15, 17, 31, 76, DateTimeKind.Local).AddTicks(2950),
                            Description = "Informasjon",
                            EnergyKcalPer100g = 0.0,
                            HasImage = false,
                            IsNutritionallyVerified = false,
                            IsPublished = true,
                            Name = "Jordbær",
                            Type = 1,
                            Url = "jordbar"
                        },
                        new
                        {
                            Id = 48,
                            DateCreated = new DateTime(2024, 2, 7, 15, 17, 31, 76, DateTimeKind.Local).AddTicks(2956),
                            DateUpdated = new DateTime(2024, 2, 7, 15, 17, 31, 76, DateTimeKind.Local).AddTicks(2958),
                            Description = "Informasjon",
                            EnergyKcalPer100g = 0.0,
                            HasImage = false,
                            IsNutritionallyVerified = false,
                            IsPublished = true,
                            Name = "Bringebær",
                            Type = 1,
                            Url = "bringebar"
                        },
                        new
                        {
                            Id = 49,
                            DateCreated = new DateTime(2024, 2, 7, 15, 17, 31, 76, DateTimeKind.Local).AddTicks(2964),
                            DateUpdated = new DateTime(2024, 2, 7, 15, 17, 31, 76, DateTimeKind.Local).AddTicks(2966),
                            Description = "Informasjon",
                            EnergyKcalPer100g = 0.0,
                            HasImage = false,
                            IsNutritionallyVerified = false,
                            IsPublished = true,
                            Name = "Grønne epler",
                            Type = 1,
                            Url = "gronne-epler"
                        },
                        new
                        {
                            Id = 50,
                            DateCreated = new DateTime(2024, 2, 7, 15, 17, 31, 76, DateTimeKind.Local).AddTicks(2971),
                            DateUpdated = new DateTime(2024, 2, 7, 15, 17, 31, 76, DateTimeKind.Local).AddTicks(2974),
                            Description = "Informasjon",
                            EnergyKcalPer100g = 0.0,
                            HasImage = false,
                            IsNutritionallyVerified = false,
                            IsPublished = true,
                            Name = "Røde epler",
                            Type = 1,
                            Url = "rode-epler"
                        },
                        new
                        {
                            Id = 51,
                            DateCreated = new DateTime(2024, 2, 7, 15, 17, 31, 76, DateTimeKind.Local).AddTicks(2979),
                            DateUpdated = new DateTime(2024, 2, 7, 15, 17, 31, 76, DateTimeKind.Local).AddTicks(2981),
                            Description = "Informasjon",
                            EnergyKcalPer100g = 0.0,
                            HasImage = false,
                            IsNutritionallyVerified = false,
                            IsPublished = true,
                            Name = "Gule epler",
                            Type = 1,
                            Url = "gule-epler"
                        },
                        new
                        {
                            Id = 52,
                            DateCreated = new DateTime(2024, 2, 7, 15, 17, 31, 76, DateTimeKind.Local).AddTicks(2987),
                            DateUpdated = new DateTime(2024, 2, 7, 15, 17, 31, 76, DateTimeKind.Local).AddTicks(2989),
                            Description = "Informasjon",
                            EnergyKcalPer100g = 0.0,
                            HasImage = false,
                            IsNutritionallyVerified = false,
                            IsPublished = true,
                            Name = "Appelsin",
                            Type = 1,
                            Url = "appelsin"
                        },
                        new
                        {
                            Id = 53,
                            DateCreated = new DateTime(2024, 2, 7, 15, 17, 31, 76, DateTimeKind.Local).AddTicks(2995),
                            DateUpdated = new DateTime(2024, 2, 7, 15, 17, 31, 76, DateTimeKind.Local).AddTicks(2997),
                            Description = "Informasjon",
                            EnergyKcalPer100g = 0.0,
                            HasImage = false,
                            IsNutritionallyVerified = false,
                            IsPublished = true,
                            Name = "Sitron",
                            Type = 1,
                            Url = "sitron"
                        },
                        new
                        {
                            Id = 54,
                            DateCreated = new DateTime(2024, 2, 7, 15, 17, 31, 76, DateTimeKind.Local).AddTicks(3003),
                            DateUpdated = new DateTime(2024, 2, 7, 15, 17, 31, 76, DateTimeKind.Local).AddTicks(3005),
                            Description = "Informasjon",
                            EnergyKcalPer100g = 0.0,
                            HasImage = false,
                            IsNutritionallyVerified = false,
                            IsPublished = true,
                            Name = "Økologisk sitron",
                            Type = 1,
                            Url = "okologisk-sitron"
                        },
                        new
                        {
                            Id = 55,
                            DateCreated = new DateTime(2024, 2, 7, 15, 17, 31, 76, DateTimeKind.Local).AddTicks(3011),
                            DateUpdated = new DateTime(2024, 2, 7, 15, 17, 31, 76, DateTimeKind.Local).AddTicks(3013),
                            Description = "Informasjon",
                            EnergyKcalPer100g = 0.0,
                            HasImage = false,
                            IsNutritionallyVerified = false,
                            IsPublished = true,
                            Name = "Lime",
                            Type = 1,
                            Url = "lime"
                        },
                        new
                        {
                            Id = 56,
                            DateCreated = new DateTime(2024, 2, 7, 15, 17, 31, 76, DateTimeKind.Local).AddTicks(3018),
                            DateUpdated = new DateTime(2024, 2, 7, 15, 17, 31, 76, DateTimeKind.Local).AddTicks(3020),
                            Description = "Informasjon",
                            EnergyKcalPer100g = 0.0,
                            HasImage = false,
                            IsNutritionallyVerified = false,
                            IsPublished = true,
                            Name = "Hermetiske mandarinbåter",
                            Type = 1,
                            Url = "hermetiske-mandarinbater"
                        },
                        new
                        {
                            Id = 57,
                            DateCreated = new DateTime(2024, 2, 7, 15, 17, 31, 76, DateTimeKind.Local).AddTicks(3041),
                            DateUpdated = new DateTime(2024, 2, 7, 15, 17, 31, 76, DateTimeKind.Local).AddTicks(3044),
                            Description = "Informasjon",
                            EnergyKcalPer100g = 0.0,
                            HasImage = false,
                            IsNutritionallyVerified = false,
                            IsPublished = true,
                            Name = "Hermetiske pærer",
                            Type = 1,
                            Url = "hermetiske-parer"
                        },
                        new
                        {
                            Id = 58,
                            DateCreated = new DateTime(2024, 2, 7, 15, 17, 31, 76, DateTimeKind.Local).AddTicks(3050),
                            DateUpdated = new DateTime(2024, 2, 7, 15, 17, 31, 76, DateTimeKind.Local).AddTicks(3052),
                            Description = "Informasjon",
                            EnergyKcalPer100g = 0.0,
                            HasImage = false,
                            IsNutritionallyVerified = false,
                            IsPublished = true,
                            Name = "Hermetiske fersken",
                            Type = 1,
                            Url = "hermetiske-fersken"
                        },
                        new
                        {
                            Id = 59,
                            DateCreated = new DateTime(2024, 2, 7, 15, 17, 31, 76, DateTimeKind.Local).AddTicks(3087),
                            DateUpdated = new DateTime(2024, 2, 7, 15, 17, 31, 76, DateTimeKind.Local).AddTicks(3090),
                            Description = "Informasjon",
                            EnergyKcalPer100g = 0.0,
                            HasImage = false,
                            IsNutritionallyVerified = false,
                            IsPublished = true,
                            Name = "Banan",
                            Type = 1,
                            Url = "banan"
                        },
                        new
                        {
                            Id = 60,
                            DateCreated = new DateTime(2024, 2, 7, 15, 17, 31, 76, DateTimeKind.Local).AddTicks(3096),
                            DateUpdated = new DateTime(2024, 2, 7, 15, 17, 31, 76, DateTimeKind.Local).AddTicks(3098),
                            Description = "Informasjon",
                            EnergyKcalPer100g = 0.0,
                            HasImage = false,
                            IsNutritionallyVerified = false,
                            IsPublished = true,
                            Name = "Klementin",
                            Type = 1,
                            Url = "klementin"
                        },
                        new
                        {
                            Id = 61,
                            DateCreated = new DateTime(2024, 2, 7, 15, 17, 31, 76, DateTimeKind.Local).AddTicks(3103),
                            DateUpdated = new DateTime(2024, 2, 7, 15, 17, 31, 76, DateTimeKind.Local).AddTicks(3105),
                            Description = "Informasjon",
                            EnergyKcalPer100g = 0.0,
                            HasImage = false,
                            IsNutritionallyVerified = false,
                            IsPublished = true,
                            Name = "Blå druer",
                            Type = 1,
                            Url = "bla-druer"
                        },
                        new
                        {
                            Id = 62,
                            DateCreated = new DateTime(2024, 2, 7, 15, 17, 31, 76, DateTimeKind.Local).AddTicks(3111),
                            DateUpdated = new DateTime(2024, 2, 7, 15, 17, 31, 76, DateTimeKind.Local).AddTicks(3113),
                            Description = "Informasjon",
                            EnergyKcalPer100g = 0.0,
                            HasImage = false,
                            IsNutritionallyVerified = false,
                            IsPublished = true,
                            Name = "Grønne druer",
                            Type = 1,
                            Url = "gronne-druer"
                        },
                        new
                        {
                            Id = 63,
                            DateCreated = new DateTime(2024, 2, 7, 15, 17, 31, 76, DateTimeKind.Local).AddTicks(3119),
                            DateUpdated = new DateTime(2024, 2, 7, 15, 17, 31, 76, DateTimeKind.Local).AddTicks(3121),
                            Description = "Informasjon",
                            EnergyKcalPer100g = 0.0,
                            HasImage = false,
                            IsNutritionallyVerified = false,
                            IsPublished = true,
                            Name = "Rosiner",
                            Type = 1,
                            Url = "rosiner"
                        },
                        new
                        {
                            Id = 64,
                            DateCreated = new DateTime(2024, 2, 7, 15, 17, 31, 76, DateTimeKind.Local).AddTicks(3126),
                            DateUpdated = new DateTime(2024, 2, 7, 15, 17, 31, 76, DateTimeKind.Local).AddTicks(3128),
                            Description = "Informasjon",
                            EnergyKcalPer100g = 0.0,
                            HasImage = false,
                            IsNutritionallyVerified = false,
                            IsPublished = true,
                            Name = "Korinter",
                            Type = 1,
                            Url = "korinter"
                        });
                });

            modelBuilder.Entity("MenuPlanner.Models.Entities.IngredientAllergen", b =>
                {
                    b.Property<int>("IngredientId")
                        .HasColumnType("int");

                    b.Property<int>("AllergenId")
                        .HasColumnType("int");

                    b.Property<int>("Amount")
                        .HasColumnType("int");

                    b.HasKey("IngredientId", "AllergenId");

                    b.HasIndex("AllergenId");

                    b.ToTable("IngredientAllergens");

                    b.HasData(
                        new
                        {
                            IngredientId = 15,
                            AllergenId = 11,
                            Amount = 4
                        },
                        new
                        {
                            IngredientId = 1,
                            AllergenId = 4,
                            Amount = 4
                        },
                        new
                        {
                            IngredientId = 23,
                            AllergenId = 5,
                            Amount = 4
                        });
                });

            modelBuilder.Entity("MenuPlanner.Models.Entities.IngredientNutrient", b =>
                {
                    b.Property<int>("IngredientId")
                        .HasColumnType("int");

                    b.Property<int>("NutrientId")
                        .HasColumnType("int");

                    b.Property<decimal>("AmountPer100Grams")
                        .HasColumnType("decimal(9,8)");

                    b.HasKey("IngredientId", "NutrientId");

                    b.HasIndex("NutrientId");

                    b.ToTable("IngredientNutrients");

                    b.HasData(
                        new
                        {
                            IngredientId = 15,
                            NutrientId = 6,
                            AmountPer100Grams = 1m
                        },
                        new
                        {
                            IngredientId = 15,
                            NutrientId = 7,
                            AmountPer100Grams = 0.6m
                        },
                        new
                        {
                            IngredientId = 15,
                            NutrientId = 2,
                            AmountPer100Grams = 4.5m
                        },
                        new
                        {
                            IngredientId = 15,
                            NutrientId = 3,
                            AmountPer100Grams = 4.5m
                        },
                        new
                        {
                            IngredientId = 15,
                            NutrientId = 1,
                            AmountPer100Grams = 3.5m
                        },
                        new
                        {
                            IngredientId = 15,
                            NutrientId = 44,
                            AmountPer100Grams = 0.10m
                        },
                        new
                        {
                            IngredientId = 15,
                            NutrientId = 13,
                            AmountPer100Grams = 0.00015m
                        },
                        new
                        {
                            IngredientId = 15,
                            NutrientId = 18,
                            AmountPer100Grams = 0.0000006m
                        },
                        new
                        {
                            IngredientId = 15,
                            NutrientId = 16,
                            AmountPer100Grams = 0.000008m
                        },
                        new
                        {
                            IngredientId = 15,
                            NutrientId = 25,
                            AmountPer100Grams = 0.171m
                        },
                        new
                        {
                            IngredientId = 15,
                            NutrientId = 28,
                            AmountPer100Grams = 0.13m
                        },
                        new
                        {
                            IngredientId = 15,
                            NutrientId = 29,
                            AmountPer100Grams = 0.115m
                        },
                        new
                        {
                            IngredientId = 15,
                            NutrientId = 35,
                            AmountPer100Grams = 0.000016m
                        });
                });

            modelBuilder.Entity("MenuPlanner.Models.Entities.Nutrient", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("AlwaysDisplay")
                        .HasColumnType("bit");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Emphasized")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SortOrder")
                        .HasColumnType("int");

                    b.Property<int?>("SubTypeOf")
                        .HasColumnType("int");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Nutrients");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AlwaysDisplay = false,
                            Description = "Informasjon.",
                            Emphasized = false,
                            Name = "Protein",
                            SortOrder = 0,
                            Type = 10,
                            Url = "protein"
                        },
                        new
                        {
                            Id = 2,
                            AlwaysDisplay = false,
                            Description = "Total mengde karbohydrater, inkludert sukkerarter, polyoler og stivelse.",
                            Emphasized = false,
                            Name = "Karbohydrater",
                            SortOrder = 0,
                            Type = 5,
                            Url = "karbohydrater"
                        },
                        new
                        {
                            Id = 3,
                            AlwaysDisplay = false,
                            Description = "Informasjon.",
                            Emphasized = false,
                            Name = "Sukkerarter",
                            SortOrder = 0,
                            SubTypeOf = 5,
                            Type = 6,
                            Url = "sukkerarter"
                        },
                        new
                        {
                            Id = 4,
                            AlwaysDisplay = false,
                            Description = "Informasjon.",
                            Emphasized = false,
                            Name = "Polyoler",
                            SortOrder = 0,
                            SubTypeOf = 5,
                            Type = 7,
                            Url = "polyoler"
                        },
                        new
                        {
                            Id = 5,
                            AlwaysDisplay = false,
                            Description = "Informasjon.",
                            Emphasized = false,
                            Name = "Stivelse",
                            SortOrder = 0,
                            SubTypeOf = 5,
                            Type = 8,
                            Url = "stivelse"
                        },
                        new
                        {
                            Id = 6,
                            AlwaysDisplay = false,
                            Description = "Angir total mengde fett i en ingrediens, inkludert mettet, enumettet og flerumettet fett.",
                            Emphasized = false,
                            Name = "Fett",
                            SortOrder = 1,
                            Type = 0,
                            Url = "fett"
                        },
                        new
                        {
                            Id = 7,
                            AlwaysDisplay = false,
                            Description = "Informasjon",
                            Emphasized = false,
                            Name = "Mettet fett",
                            SortOrder = 1,
                            SubTypeOf = 0,
                            Type = 1,
                            Url = "mettet-fett"
                        },
                        new
                        {
                            Id = 8,
                            AlwaysDisplay = false,
                            Description = "Informasjon",
                            Emphasized = false,
                            Name = "Enumettet fett",
                            SortOrder = 2,
                            SubTypeOf = 0,
                            Type = 2,
                            Url = "enumettet-fett"
                        },
                        new
                        {
                            Id = 9,
                            AlwaysDisplay = false,
                            Description = "Informasjon",
                            Emphasized = false,
                            Name = "Flerumettet fett",
                            SortOrder = 3,
                            SubTypeOf = 0,
                            Type = 3,
                            Url = "flerumettet-fett"
                        },
                        new
                        {
                            Id = 10,
                            AlwaysDisplay = false,
                            Description = "Informasjon",
                            Emphasized = false,
                            Name = "Transfett",
                            SortOrder = 4,
                            SubTypeOf = 0,
                            Type = 4,
                            Url = "transfett"
                        },
                        new
                        {
                            Id = 11,
                            AlwaysDisplay = false,
                            Description = "Informasjon",
                            Emphasized = false,
                            Name = "Vitamin A, retinol",
                            SortOrder = 0,
                            Type = 12,
                            Url = "vitamin-a-retinol"
                        },
                        new
                        {
                            Id = 12,
                            AlwaysDisplay = false,
                            Description = "Informasjon",
                            Emphasized = false,
                            Name = "Vitamin B1, tiamin",
                            SortOrder = 0,
                            Type = 12,
                            Url = "vitamin-b1-tiamin"
                        },
                        new
                        {
                            Id = 13,
                            AlwaysDisplay = false,
                            Description = "Informasjon",
                            Emphasized = false,
                            Name = "Vitamin B2, riboflavin",
                            SortOrder = 0,
                            Type = 12,
                            Url = "vitamin-b2-riboflavin"
                        },
                        new
                        {
                            Id = 14,
                            AlwaysDisplay = false,
                            Description = "Informasjon",
                            Emphasized = false,
                            Name = "Vitamin B3, niacin",
                            SortOrder = 0,
                            Type = 12,
                            Url = "vitamin-b3-niacin"
                        },
                        new
                        {
                            Id = 15,
                            AlwaysDisplay = false,
                            Description = "Informasjon",
                            Emphasized = false,
                            Name = "Vitamin B5, pantotensyre",
                            SortOrder = 0,
                            Type = 12,
                            Url = "vitamin-b5-pantotensyre"
                        },
                        new
                        {
                            Id = 16,
                            AlwaysDisplay = false,
                            Description = "Informasjon",
                            Emphasized = false,
                            Name = "Vitamin B7, biotin",
                            SortOrder = 0,
                            Type = 12,
                            Url = "vitamin-b7-biotin"
                        },
                        new
                        {
                            Id = 17,
                            AlwaysDisplay = false,
                            Description = "Informasjon",
                            Emphasized = false,
                            Name = "Vitamin B9, folat",
                            SortOrder = 0,
                            Type = 12,
                            Url = "vitamin-b9-folat"
                        },
                        new
                        {
                            Id = 18,
                            AlwaysDisplay = false,
                            Description = "Informasjon",
                            Emphasized = false,
                            Name = "Vitamin B12, kobalamin",
                            SortOrder = 0,
                            Type = 12,
                            Url = "vitamin-b12-kobalamin"
                        },
                        new
                        {
                            Id = 19,
                            AlwaysDisplay = false,
                            Description = "Informasjon",
                            Emphasized = false,
                            Name = "Vitamin C, askorbinsyre",
                            SortOrder = 0,
                            Type = 12,
                            Url = "vitamin-c-askorbinsyre"
                        },
                        new
                        {
                            Id = 20,
                            AlwaysDisplay = false,
                            Description = "Informasjon",
                            Emphasized = false,
                            Name = "Vitamin D2, ergokalsiferol",
                            SortOrder = 0,
                            Type = 12,
                            Url = "vitamin-d2-ergokalsiferol"
                        },
                        new
                        {
                            Id = 21,
                            AlwaysDisplay = false,
                            Description = "Informasjon",
                            Emphasized = false,
                            Name = "Vitamin D3, kolikalsiferol",
                            SortOrder = 0,
                            Type = 12,
                            Url = "vitamin-d3-kolikalsiferol"
                        },
                        new
                        {
                            Id = 22,
                            AlwaysDisplay = false,
                            Description = "Tokoferol (E306) betegner en blanding av de rene stoffene alfa-tokoferol (E307), gamma-tokoferol (E308) og delta-tokoferol (E309).",
                            Emphasized = false,
                            Name = "Vitamin E, tokoferol (E306)",
                            SortOrder = 0,
                            Type = 12,
                            Url = "vitamin-e-tokoferol-e306"
                        },
                        new
                        {
                            Id = 23,
                            AlwaysDisplay = false,
                            Description = "Informasjon",
                            Emphasized = false,
                            Name = "Vitamin K1, fyllokinon",
                            SortOrder = 0,
                            Type = 12,
                            Url = "vitamin-k1-fyllokinon"
                        },
                        new
                        {
                            Id = 24,
                            AlwaysDisplay = false,
                            Description = "Informasjon",
                            Emphasized = false,
                            Name = "Vitamin K2, menakinon",
                            SortOrder = 0,
                            Type = 12,
                            Url = "vitamin-k2-menakinon"
                        },
                        new
                        {
                            Id = 25,
                            AlwaysDisplay = false,
                            Description = "Engelsk navn: Potassium",
                            Emphasized = false,
                            Name = "Kalium",
                            SortOrder = 0,
                            Type = 13,
                            Url = "kalium"
                        },
                        new
                        {
                            Id = 26,
                            AlwaysDisplay = false,
                            Description = "Engelsk navn: Chlorine. Komponent i vanlig bordsalt (natriumklorid).",
                            Emphasized = false,
                            Name = "Klorin",
                            SortOrder = 0,
                            Type = 13,
                            Url = "klorin"
                        },
                        new
                        {
                            Id = 27,
                            AlwaysDisplay = false,
                            Description = "Engelsk navn: Sodium. Komponent i vanlig bordsalt (natriumklorid).",
                            Emphasized = false,
                            Name = "Natrium",
                            SortOrder = 0,
                            Type = 13,
                            Url = "natrium"
                        },
                        new
                        {
                            Id = 28,
                            AlwaysDisplay = false,
                            Description = "Engelsk navn: Calcium. Viktig for skjelettet og tennene.",
                            Emphasized = false,
                            Name = "Kalsium",
                            SortOrder = 0,
                            Type = 13,
                            Url = "kalsium"
                        },
                        new
                        {
                            Id = 29,
                            AlwaysDisplay = false,
                            Description = "Engelsk navn: Phosphorus.",
                            Emphasized = false,
                            Name = "Fosfor",
                            SortOrder = 0,
                            Type = 13,
                            Url = "fosfor"
                        },
                        new
                        {
                            Id = 30,
                            AlwaysDisplay = false,
                            Description = "Engelsk navn: Magnesium.",
                            Emphasized = false,
                            Name = "Magnesium",
                            SortOrder = 0,
                            Type = 13,
                            Url = "magnesium"
                        },
                        new
                        {
                            Id = 31,
                            AlwaysDisplay = false,
                            Description = "Engelsk navn: Iron.",
                            Emphasized = false,
                            Name = "Jern",
                            SortOrder = 0,
                            Type = 13,
                            Url = "jern"
                        },
                        new
                        {
                            Id = 32,
                            AlwaysDisplay = false,
                            Description = "Engelsk navn: Zinc.",
                            Emphasized = false,
                            Name = "Sink",
                            SortOrder = 0,
                            Type = 13,
                            Url = "sink"
                        },
                        new
                        {
                            Id = 33,
                            AlwaysDisplay = false,
                            Description = "Engelsk navn: Manganese.",
                            Emphasized = false,
                            Name = "Mangan",
                            SortOrder = 0,
                            Type = 13,
                            Url = "mangan"
                        },
                        new
                        {
                            Id = 34,
                            AlwaysDisplay = false,
                            Description = "Engelsk navn: Copper.",
                            Emphasized = false,
                            Name = "Kobber",
                            SortOrder = 0,
                            Type = 13,
                            Url = "kobber"
                        },
                        new
                        {
                            Id = 35,
                            AlwaysDisplay = false,
                            Description = "Engelsk navn: iodine.",
                            Emphasized = false,
                            Name = "Jod",
                            SortOrder = 0,
                            Type = 13,
                            Url = "jod"
                        },
                        new
                        {
                            Id = 36,
                            AlwaysDisplay = false,
                            Description = "Engelsk navn: Molybdenum.",
                            Emphasized = false,
                            Name = "Molybden",
                            SortOrder = 0,
                            Type = 13,
                            Url = "molybden"
                        },
                        new
                        {
                            Id = 37,
                            AlwaysDisplay = false,
                            Description = "Engelsk navn: Selenium.",
                            Emphasized = false,
                            Name = "Selen",
                            SortOrder = 0,
                            Type = 13,
                            Url = "selen"
                        },
                        new
                        {
                            Id = 38,
                            AlwaysDisplay = false,
                            Description = "Engelsk navn: Fluoride.",
                            Emphasized = false,
                            Name = "Fluor",
                            SortOrder = 0,
                            Type = 13,
                            Url = "fluor"
                        },
                        new
                        {
                            Id = 39,
                            AlwaysDisplay = false,
                            Description = "Engelsk navn: Chromium.",
                            Emphasized = false,
                            Name = "Krom",
                            SortOrder = 0,
                            Type = 13,
                            Url = "korm"
                        },
                        new
                        {
                            Id = 40,
                            AlwaysDisplay = false,
                            Description = "Engelsk navn: Nickel.",
                            Emphasized = false,
                            Name = "Nikkel",
                            SortOrder = 0,
                            Type = 13,
                            Url = "nikkel"
                        },
                        new
                        {
                            Id = 41,
                            AlwaysDisplay = false,
                            Description = "Engelsk navn: Boron.",
                            Emphasized = false,
                            Name = "Bor",
                            SortOrder = 0,
                            Type = 13,
                            Url = "bor"
                        },
                        new
                        {
                            Id = 42,
                            AlwaysDisplay = false,
                            Description = "Engelsk navn: Silicon.",
                            Emphasized = false,
                            Name = "Silisium",
                            SortOrder = 0,
                            Type = 13,
                            Url = "silisium"
                        },
                        new
                        {
                            Id = 43,
                            AlwaysDisplay = false,
                            Description = "Engelsk navn: Vanadium.",
                            Emphasized = false,
                            Name = "Vanadium",
                            SortOrder = 0,
                            Type = 13,
                            Url = "vanadium"
                        },
                        new
                        {
                            Id = 44,
                            AlwaysDisplay = false,
                            Description = "Natriumklorid (NaCl). Engelsk navn: Salt, sodium chloride.",
                            Emphasized = false,
                            Name = "Salt",
                            SortOrder = 0,
                            Type = 13,
                            Url = "salt"
                        });
                });

            modelBuilder.Entity("MenuPlanner.Models.Entities.Recipe", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CountryCode")
                        .HasColumnType("nvarchar(2)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateUpdated")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DifficultyLevel")
                        .HasColumnType("int");

                    b.Property<bool>("IsPublished")
                        .HasColumnType("bit");

                    b.Property<string>("MainImage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ParentRecipeId")
                        .HasColumnType("int");

                    b.Property<TimeSpan>("PrepTime")
                        .HasColumnType("time");

                    b.Property<double?>("RatingAverage")
                        .HasColumnType("float");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("CountryCode");

                    b.HasIndex("ParentRecipeId");

                    b.HasIndex("UserId");

                    b.ToTable("Recipes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CountryCode = "NO",
                            DateCreated = new DateTime(2024, 2, 7, 15, 17, 31, 76, DateTimeKind.Local).AddTicks(5767),
                            DateUpdated = new DateTime(2024, 2, 7, 15, 17, 31, 76, DateTimeKind.Local).AddTicks(6065),
                            Description = "Deilige, tynne pannekaker er hele familiens favoritt. Server gjerne med blåbærsyltetøy eller sukker og sitrondråper.",
                            DifficultyLevel = 0,
                            IsPublished = true,
                            Name = "Pannekaker",
                            PrepTime = new TimeSpan(0, 1, 0, 0, 0),
                            RatingAverage = 7.4000000000000004,
                            Url = "pannekaker"
                        });
                });

            modelBuilder.Entity("MenuPlanner.Models.Entities.RecipeIngredient", b =>
                {
                    b.Property<int>("RecipeId")
                        .HasColumnType("int");

                    b.Property<int>("IngredientId")
                        .HasColumnType("int");

                    b.Property<double>("Amount")
                        .HasColumnType("float");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SortOrder")
                        .HasColumnType("int");

                    b.Property<int>("Unit")
                        .HasColumnType("int");

                    b.HasKey("RecipeId", "IngredientId");

                    b.HasIndex("IngredientId");

                    b.ToTable("RecipeIngredients");

                    b.HasData(
                        new
                        {
                            RecipeId = 1,
                            IngredientId = 1,
                            Amount = 3.0,
                            SortOrder = 1,
                            Unit = 2
                        },
                        new
                        {
                            RecipeId = 1,
                            IngredientId = 15,
                            Amount = 5.0,
                            SortOrder = 2,
                            Unit = 2
                        },
                        new
                        {
                            RecipeId = 1,
                            IngredientId = 23,
                            Amount = 4.0,
                            SortOrder = 3,
                            Unit = 12
                        },
                        new
                        {
                            RecipeId = 1,
                            IngredientId = 28,
                            Amount = 0.5,
                            SortOrder = 4,
                            Unit = 9
                        });
                });

            modelBuilder.Entity("MenuPlanner.Models.Entities.RecipeStep", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RecipeId")
                        .HasColumnType("int");

                    b.Property<int>("StepNumber")
                        .HasColumnType("int");

                    b.Property<string>("StepText")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("RecipeId");

                    b.ToTable("RecipeSteps");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            RecipeId = 1,
                            StepNumber = 1,
                            StepText = "Bland mel og salt."
                        },
                        new
                        {
                            Id = 2,
                            RecipeId = 1,
                            StepNumber = 2,
                            StepText = "Ha i halvparten av melken og visp sammen til en tykk, klumpefri røre."
                        },
                        new
                        {
                            Id = 3,
                            RecipeId = 1,
                            StepNumber = 3,
                            StepText = "Tilsett resten av melken og visp sammen."
                        },
                        new
                        {
                            Id = 4,
                            RecipeId = 1,
                            StepNumber = 4,
                            StepText = "Tilsett eggene og visp sammen til røren blir fin og gul."
                        },
                        new
                        {
                            Id = 5,
                            RecipeId = 1,
                            StepNumber = 5,
                            StepText = "La røren hvile i minst 30 minutter for best resultat."
                        },
                        new
                        {
                            Id = 6,
                            RecipeId = 1,
                            StepNumber = 6,
                            StepText = "Ha smør eller margarin i pannen og stek pannekakene til de er gyldne på begge sider."
                        },
                        new
                        {
                            Id = 7,
                            RecipeId = 1,
                            StepNumber = 7,
                            StepText = "Brett pannekakene og legg dem i en ildfast form med lokk. Slik holder de seg varme til alle er ferdig stekt."
                        });
                });

            modelBuilder.Entity("MenuPlanner.Models.Entities.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("Facebook")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("HasBackgropImage")
                        .HasColumnType("bit");

                    b.Property<bool>("HasProfileImage")
                        .HasColumnType("bit");

                    b.Property<string>("Instagram")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Introduction")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TwitterX")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("Website")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("MenuPlanner.Models.Entities.IngredientAllergen", b =>
                {
                    b.HasOne("MenuPlanner.Models.Entities.Allergen", "Allergen")
                        .WithMany()
                        .HasForeignKey("AllergenId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MenuPlanner.Models.Entities.Ingredient", "Ingredient")
                        .WithMany("IngredientAllergens")
                        .HasForeignKey("IngredientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Allergen");

                    b.Navigation("Ingredient");
                });

            modelBuilder.Entity("MenuPlanner.Models.Entities.IngredientNutrient", b =>
                {
                    b.HasOne("MenuPlanner.Models.Entities.Ingredient", "Ingredient")
                        .WithMany("IngredientNutrients")
                        .HasForeignKey("IngredientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MenuPlanner.Models.Entities.Nutrient", "Nutrient")
                        .WithMany()
                        .HasForeignKey("NutrientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Ingredient");

                    b.Navigation("Nutrient");
                });

            modelBuilder.Entity("MenuPlanner.Models.Entities.Recipe", b =>
                {
                    b.HasOne("MenuPlanner.Models.Entities.Country", "Country")
                        .WithMany()
                        .HasForeignKey("CountryCode");

                    b.HasOne("MenuPlanner.Models.Entities.Recipe", null)
                        .WithMany("SubRecipes")
                        .HasForeignKey("ParentRecipeId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("MenuPlanner.Models.Entities.User", "User")
                        .WithMany("Recipes")
                        .HasForeignKey("UserId");

                    b.Navigation("Country");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MenuPlanner.Models.Entities.RecipeIngredient", b =>
                {
                    b.HasOne("MenuPlanner.Models.Entities.Ingredient", "Ingredient")
                        .WithMany("RecipeIngredients")
                        .HasForeignKey("IngredientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MenuPlanner.Models.Entities.Recipe", "Recipe")
                        .WithMany("RecipeIngredients")
                        .HasForeignKey("RecipeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Ingredient");

                    b.Navigation("Recipe");
                });

            modelBuilder.Entity("MenuPlanner.Models.Entities.RecipeStep", b =>
                {
                    b.HasOne("MenuPlanner.Models.Entities.Recipe", "Recipe")
                        .WithMany("Steps")
                        .HasForeignKey("RecipeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Recipe");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("MenuPlanner.Models.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("MenuPlanner.Models.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MenuPlanner.Models.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("MenuPlanner.Models.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MenuPlanner.Models.Entities.Ingredient", b =>
                {
                    b.Navigation("IngredientAllergens");

                    b.Navigation("IngredientNutrients");

                    b.Navigation("RecipeIngredients");
                });

            modelBuilder.Entity("MenuPlanner.Models.Entities.Recipe", b =>
                {
                    b.Navigation("RecipeIngredients");

                    b.Navigation("Steps");

                    b.Navigation("SubRecipes");
                });

            modelBuilder.Entity("MenuPlanner.Models.Entities.User", b =>
                {
                    b.Navigation("Recipes");
                });
#pragma warning restore 612, 618
        }
    }
}
